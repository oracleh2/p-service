# docker-compose-min.yml - Только инфраструктурные сервисы
# Backend и Frontend запускаются вручную для разработки

services:
  postgres:
    image: postgres:15
    container_name: mobile-proxy-postgres
    environment:
      POSTGRES_DB: mobile_proxy
      POSTGRES_USER: proxy_user
      POSTGRES_PASSWORD: proxy_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - proxy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proxy_user -d mobile_proxy"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: postgres -c shared_preload_libraries=pg_stat_statements

  redis:
    image: redis:7-alpine
    container_name: mobile-proxy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - proxy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  prometheus:
    image: prom/prometheus:latest
    container_name: mobile-proxy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - proxy-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.size=2GB'

  grafana:
    image: grafana/grafana:latest
    container_name: mobile-proxy-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - proxy-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Adminer для управления базой данных (опционально)
  adminer:
    image: adminer:latest
    container_name: mobile-proxy-adminer
    ports:
      - "8080:8080"
    networks:
      - proxy-network
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - tools

  # Redis Commander для управления Redis (опционально)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mobile-proxy-redis-commander
    ports:
      - "8081:8081"
    networks:
      - proxy-network
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  proxy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
