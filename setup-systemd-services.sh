#!/bin/bash
# setup-systemd-services.sh - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SystemD —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞

set -e

echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SystemD —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è Mobile Proxy Service"
echo ""

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã Docker Compose
DOCKER_COMPOSE_CMD=""

if command -v docker-compose >/dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker-compose"
    echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: docker-compose"
elif docker compose version >/dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
    echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: docker compose"
else
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ docker-compose –∏–ª–∏ docker compose"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º"
    exit 1
fi

echo ""

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
CURRENT_USER=$(whoami)
PROJECT_DIR=$(pwd)
BACKEND_DIR="$PROJECT_DIR/backend"
FRONTEND_DIR="$PROJECT_DIR/frontend"

echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $CURRENT_USER"
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è docker-compose.yml)"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -f "$BACKEND_DIR/venv/bin/python" ]; then
    echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $BACKEND_DIR/venv/"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: ./setup-backend-env.sh"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è node_modules
if [ ! -d "$FRONTEND_DIR/node_modules" ]; then
    echo "‚ùå Node modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $FRONTEND_DIR/"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd frontend && npm install"
    exit 1
fi

# –°–±–æ—Ä–∫–∞ frontend –¥–ª—è production
echo "üî® –°–±–æ—Ä–∫–∞ frontend –¥–ª—è production..."
cd "$FRONTEND_DIR"
npm run build
echo "‚úÖ Frontend —Å–æ–±—Ä–∞–Ω"
echo ""

cd "$PROJECT_DIR"

# –°–æ–∑–¥–∞–Ω–∏–µ backend systemd —Å–µ—Ä–≤–∏—Å–∞
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Backend..."

sudo tee /etc/systemd/system/mobile-proxy-backend.service > /dev/null << EOF
[Unit]
Description=Mobile Proxy Service Backend
After=network.target postgresql.service redis.service
Wants=postgresql.service redis.service

[Service]
Type=simple
User=$CURRENT_USER
Group=$CURRENT_USER
WorkingDirectory=$BACKEND_DIR
Environment=PATH=$BACKEND_DIR/venv/bin
ExecStart=$BACKEND_DIR/venv/bin/python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal
SyslogIdentifier=mobile-proxy-backend

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EnvironmentFile=$PROJECT_DIR/.env

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$PROJECT_DIR
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

echo "‚úÖ Backend systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ frontend systemd —Å–µ—Ä–≤–∏—Å–∞
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Frontend..."

sudo tee /etc/systemd/system/mobile-proxy-frontend.service > /dev/null << EOF
[Unit]
Description=Mobile Proxy Service Frontend
After=network.target mobile-proxy-backend.service
Wants=mobile-proxy-backend.service

[Service]
Type=simple
User=$CURRENT_USER
Group=$CURRENT_USER
WorkingDirectory=$FRONTEND_DIR
Environment=PATH=/usr/bin:/bin
Environment=NODE_ENV=production
ExecStart=/usr/bin/npm run preview -- --host 0.0.0.0 --port 3000
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal
SyslogIdentifier=mobile-proxy-frontend

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EnvironmentFile=$FRONTEND_DIR/.env.local

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$PROJECT_DIR
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

echo "‚úÖ Frontend systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"
echo ""

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd
echo "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd..."
sudo systemctl daemon-reload
echo "‚úÖ SystemD –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
echo ""

# –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üéØ –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sudo systemctl enable mobile-proxy-backend.service
sudo systemctl enable mobile-proxy-frontend.service
echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω"
echo ""

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sudo systemctl start mobile-proxy-backend.service
sudo systemctl start mobile-proxy-frontend.service
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
echo ""

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo ""

echo "üì° Backend —Å—Ç–∞—Ç—É—Å:"
sudo systemctl status mobile-proxy-backend.service --no-pager -l
echo ""

echo "üåê Frontend —Å—Ç–∞—Ç—É—Å:"
sudo systemctl status mobile-proxy-frontend.service --no-pager -l
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å–µ—Ä–≤–∏—Å–∞
check_http_service() {
    local url=$1
    local name=$2
    local max_attempts=10
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$url" > /dev/null; then
            echo "‚úÖ $name –¥–æ—Å—Ç—É–ø–µ–Ω: $url"
            return 0
        fi
        echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: $name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ..."
        sleep 3
        attempt=$((attempt + 1))
    done

    echo "‚ùå $name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫: $url"
    return 1
}

check_http_service "http://localhost:8000/health" "Backend API"
check_http_service "http://localhost:3000" "Frontend"

echo ""
echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SystemD —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo ""
echo "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞:"
echo "  sudo systemctl status mobile-proxy-backend.service"
echo "  sudo systemctl status mobile-proxy-frontend.service"
echo ""
echo "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "  sudo journalctl -u mobile-proxy-backend.service -f"
echo "  sudo journalctl -u mobile-proxy-frontend.service -f"
echo ""
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "  sudo systemctl restart mobile-proxy-backend.service"
echo "  sudo systemctl restart mobile-proxy-frontend.service"
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "  sudo systemctl stop mobile-proxy-backend.service"
echo "  sudo systemctl stop mobile-proxy-frontend.service"
echo ""
echo "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:"
echo "  sudo systemctl disable mobile-proxy-backend.service"
echo "  sudo systemctl disable mobile-proxy-frontend.service"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "  Backend API: http://localhost:8000"
echo "  Frontend:    http://localhost:3000"
echo "  API Docs:    http://localhost:8000/docs"
echo ""
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã"
echo "‚úÖ –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è"
echo ""
echo "üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ Docker Compose: $DOCKER_COMPOSE_CMD"
