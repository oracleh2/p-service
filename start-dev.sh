#!/bin/bash
# start-dev.sh - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ Mobile Proxy Service –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
echo ""

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã Docker Compose
DOCKER_COMPOSE_CMD=""

if command -v docker-compose >/dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker-compose"
    echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: docker-compose"
elif docker compose version >/dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
    echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: docker compose"
else
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ docker-compose –∏–ª–∏ docker compose"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose:"
    echo "   - –î–ª—è docker-compose: sudo apt install docker-compose"
    echo "   - –î–ª—è docker compose: —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ Docker v20.10+"
    exit 1
fi

echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service=$2
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  –ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç ($service)"
        return 1
    fi
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ HTTP —Å–µ—Ä–≤–∏—Å–∞
wait_for_http_service() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=1

    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ $service_name..."

    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" > /dev/null 2>&1; then
            echo "‚úÖ $service_name –≥–æ—Ç–æ–≤"
            return 0
        fi

        echo "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done

    echo "‚ùå $service_name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
wait_for_postgres() {
    local max_attempts=30
    local attempt=1

    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."

    while [ $attempt -le $max_attempts ]; do
        if $DOCKER_COMPOSE_CMD -f docker-compose.yml exec -T postgres pg_isready -U proxy_user -d mobile_proxy > /dev/null 2>&1; then
            echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"
            return 0
        fi

        echo "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done

    echo "‚ùå PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
wait_for_redis() {
    local max_attempts=30
    local attempt=1

    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis..."

    while [ $attempt -le $max_attempts ]; do
        if $DOCKER_COMPOSE_CMD -f docker-compose.yml exec -T redis redis-cli ping | grep -q "PONG" 2>/dev/null; then
            echo "‚úÖ Redis –≥–æ—Ç–æ–≤"
            return 0
        fi

        echo "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done

    echo "‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TCP-–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ docker exec –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
wait_for_tcp_port() {
    local host=$1
    local port=$2
    local service_name=$3
    local max_attempts=30
    local attempt=1

    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ $service_name –Ω–∞ $host:$port..."

    while [ $attempt -le $max_attempts ]; do
        if timeout 3 bash -c "cat < /dev/null > /dev/tcp/$host/$port" 2>/dev/null; then
            echo "‚úÖ $service_name –≥–æ—Ç–æ–≤"
            return 0
        fi

        echo "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done

    echo "‚ùå $service_name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è backend/frontend
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
backend_port_free=true
frontend_port_free=true

if ! check_port 8000 "Backend"; then
    backend_port_free=false
fi

if ! check_port 3000 "Frontend"; then
    frontend_port_free=false
fi

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –°–æ–∑–¥–∞–µ–º prometheus.yml –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
mkdir -p monitoring
if [ ! -f monitoring/prometheus.yml ]; then
cat > monitoring/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'mobile-proxy-backend'
    static_configs:
      - targets: ['host.docker.internal:8000']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'mobile-proxy-frontend'
    static_configs:
      - targets: ['host.docker.internal:3000']
    metrics_path: '/metrics'
    scrape_interval: 30s
EOF
echo "‚úÖ monitoring/prometheus.yml —Å–æ–∑–¥–∞–Ω"
fi

# –°–æ–∑–¥–∞–µ–º Grafana datasource
mkdir -p monitoring/grafana/datasources
if [ ! -f monitoring/grafana/datasources/prometheus.yml ]; then
cat > monitoring/grafana/datasources/prometheus.yml << 'EOF'
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
EOF
echo "‚úÖ monitoring/grafana/datasources/prometheus.yml —Å–æ–∑–¥–∞–Ω"
fi

# –°–æ–∑–¥–∞–µ–º Grafana dashboard provider
mkdir -p monitoring/grafana/dashboards
if [ ! -f monitoring/grafana/dashboards/dashboard.yml ]; then
cat > monitoring/grafana/dashboards/dashboard.yml << 'EOF'
apiVersion: 1

providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    editable: true
    options:
      path: /etc/grafana/provisioning/dashboards
EOF
echo "‚úÖ monitoring/grafana/dashboards/dashboard.yml —Å–æ–∑–¥–∞–Ω"
fi

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f .env ]; then
cat > .env << 'EOF'
# Database
DATABASE_URL=postgresql://proxy_user:proxy_password@localhost:5432/mobile_proxy

# Redis
REDIS_URL=redis://localhost:6379

# Security
SECRET_KEY=your-secret-key-change-in-production
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production

# Proxy settings
DEFAULT_ROTATION_INTERVAL=600
MAX_DEVICES=50
MAX_REQUESTS_PER_MINUTE=100

# Grafana
GRAFANA_ADMIN_PASSWORD=admin123

# Development
DEBUG=true
RELOAD=true
EOF
echo "‚úÖ .env —Å–æ–∑–¥–∞–Ω"
fi

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "üê≥ –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_COMPOSE_CMD -f docker-compose.yml up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_postgres &
postgres_pid=$!

wait_for_redis &
redis_pid=$!

wait_for_http_service "http://localhost:9090" "Prometheus" &
prometheus_pid=$!

wait_for_http_service "http://localhost:3001" "Grafana" &
grafana_pid=$!

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
wait $postgres_pid
postgres_result=$?

wait $redis_pid
redis_result=$?

wait $prometheus_pid
prometheus_result=$?

wait $grafana_pid
grafana_result=$?

# –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
if [ $postgres_result -ne 0 ]; then
    echo "üì° –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É PostgreSQL..."
    wait_for_tcp_port "localhost" "5432" "PostgreSQL"
fi

if [ $redis_result -ne 0 ]; then
    echo "üì° –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É Redis..."
    wait_for_tcp_port "localhost" "6379" "Redis"
fi

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
$DOCKER_COMPOSE_CMD -f docker-compose.yml ps

echo ""
echo "üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Backend –∏ Frontend:"
echo ""

if [ "$backend_port_free" = true ]; then
    echo "üì° Backend (FastAPI):"
    echo "   cd backend"
    echo "   pip install -r requirements.txt"
    echo "   python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    echo "   –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8000"
    echo ""
else
    echo "‚ö†Ô∏è  Backend –ø–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç."
fi

if [ "$frontend_port_free" = true ]; then
    echo "üåê Frontend (Vue.js):"
    echo "   cd frontend"
    echo "   npm install"
    echo "   npm run dev"
    echo "   –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:3000"
    echo ""
else
    echo "‚ö†Ô∏è  Frontend –ø–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç."
fi

echo "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   PostgreSQL:  localhost:5432 (proxy_user/proxy_password)"
echo "   Redis:       localhost:6379"
echo "   Prometheus:  http://localhost:9090"
echo "   Grafana:     http://localhost:3001 (admin/admin123)"
echo ""

echo "üõ†Ô∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml --profile tools up -d"
echo "   Adminer:           http://localhost:8080 (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î)"
echo "   Redis Commander:   http://localhost:8081 (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis)"
echo ""

echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml down"
echo ""

echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml logs -f        # –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml logs postgres  # –õ–æ–≥–∏ PostgreSQL"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml restart        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
echo ""

echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml exec postgres pg_isready -U proxy_user"
echo "   $DOCKER_COMPOSE_CMD -f docker-compose.yml exec redis redis-cli ping"
echo ""

echo "‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ Backend –∏ Frontend –≤—Ä—É—á–Ω—É—é."
echo ""
echo "üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ Docker Compose: $DOCKER_COMPOSE_CMD"
