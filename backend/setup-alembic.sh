#!/bin/bash
# setup-alembic.sh - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Alembic (—Å–æ–∑–¥–∞–Ω–∏–µ alembic.ini)

set -e

echo "üóÉÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Alembic –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend
if [ ! -f "requirements.txt" ]; then
    echo "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend/"
    echo "   cd backend && ./setup-alembic.sh"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f "../.env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–∑ .env.example"
    exit 1
fi

# –ß—Ç–µ–Ω–∏–µ DATABASE_URL –∏–∑ .env —Ñ–∞–π–ª–∞
echo "üìã –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞..."
DATABASE_URL=$(grep "^DATABASE_URL=" ../.env | cut -d '=' -f2- | sed 's/^"//' | sed 's/"$//')

if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
    echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞: DATABASE_URL=postgresql://..."
    exit 1
fi

echo "‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω: ${DATABASE_URL:0:30}..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -z "$VIRTUAL_ENV" ]; then
    echo "‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    echo "   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ: source venv/bin/activate"
    echo ""
    echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏..."
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
        echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    else
        echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        echo "   –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: python -m venv venv && source venv/bin/activate"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ alembic
if ! pip show alembic > /dev/null 2>&1; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Alembic..."
    pip install alembic
    echo "‚úÖ Alembic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ alembic.ini —Å DATABASE_URL –∏–∑ .env
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ alembic.ini..."
cat > alembic.ini << EOF
# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding \`alembic[tz]\` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses
# os.pathsep. If this key is omitted entirely, it falls back to the legacy
# behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = $DATABASE_URL

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
EOF

echo "‚úÖ alembic.ini —Å–æ–∑–¥–∞–Ω —Å DATABASE_URL –∏–∑ .env"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic (—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ migrations) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if [ ! -d "alembic" ]; then
    echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic..."
    alembic init alembic
    echo "‚úÖ Alembic –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ env.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
    echo "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ alembic/env.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
    cat > alembic/env.py << 'EOF'
from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
try:
    from app.models.base import Base
    target_metadata = Base.metadata
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º None
    target_metadata = None
    print("Warning: Could not import models. Make sure app.models.base exists.")

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
EOF
    echo "‚úÖ alembic/env.py –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏"
else
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è alembic —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

echo ""
echo "‚úÖ Alembic –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo ""
echo "1. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):"
echo "   alembic revision --autogenerate -m \"Initial migration\""
echo ""
echo "2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:"
echo "   alembic upgrade head"
echo ""
echo "3. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±—É–¥—É—â–µ–º:"
echo "   alembic revision --autogenerate -m \"Description of changes\""
echo ""
echo "4. –î–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π:"
echo "   alembic downgrade -1"
echo ""
echo "üí° DATABASE_URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∑—è—Ç –∏–∑ .env —Ñ–∞–π–ª–∞"
echo "üí° –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞ alembic.ini –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
