# backend/app/main.py
import subprocess

import uvicorn
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi import FastAPI, Request, Response, HTTPException
import asyncio
import logging
import time
import random
from datetime import datetime, timezone
from .models.database import init_db
from .models.config import settings
# from .core.device_manager import ModemManager  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
from .api import auth, proxy, admin, stats
from .core.managers import get_device_manager, get_proxy_server


created_users = []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Mobile Proxy Service API",
    description="API for managing mobile proxy devices and IP rotation",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        # Localhost –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "http://localhost:3000",
        "http://localhost:8000",
        "http://localhost:8080",
        "http://localhost:5173",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:8000",
        "http://127.0.0.1:8080",
        "http://127.0.0.1:5173",
        # IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        "http://192.168.1.50:3000",
        "http://192.168.1.50:8000",
        "http://192.168.1.50:8080",
        "http://192.168.1.50:5173",
        # –ë–µ–∑ –ø–æ—Ä—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π nginx)
        "http://192.168.1.50",
        "http://localhost"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=[
        "Accept",
        "Accept-Language",
        "Content-Language",
        "Content-Type",
        "Authorization",
        "X-Requested-With",
        "Origin",
        "Access-Control-Request-Method",
        "Access-Control-Request-Headers",
    ],
    expose_headers=["*"],
    max_age=3600,
)

# –†–æ—É—Ç–µ—Ä—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
app.include_router(auth.router, prefix="/api/v1/auth", tags=["auth"])
app.include_router(auth.router, prefix="/auth", tags=["auth-legacy"])

app.include_router(proxy.router, prefix="/proxy", tags=["proxy"])
app.include_router(admin.router, prefix="/admin", tags=["admin"])
app.include_router(stats.router, prefix="/stats", tags=["stats"])

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üî• {request.method} {request.url} from {request.client.host}")

    response = await call_next(request)
    process_time = time.time() - start_time

    logger.info(
        f"{request.method} {request.url.path} "
        f"- Status: {response.status_code} "
        f"- Time: {process_time:.3f}s"
    )
    return response


# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π OPTIONS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - CORS middleware —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OPTIONS
# @app.options("/{full_path:path}")  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å CORS

# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "mobile-proxy-service",
        "version": "1.0.0",
        "timestamp": time.time(),
        "cors_enabled": True
    }


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Mobile Proxy Service API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health",
        "cors_origins": [
            "http://192.168.1.50:3000",
            "http://localhost:3000"
        ]
    }


# –Ø–≤–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
@app.get("/api/v1/cors-test")
async def cors_test():
    """–¢–µ—Å—Ç CORS"""
    return {
        "message": "CORS is working!",
        "timestamp": time.time(),
        "server": "192.168.1.50:8000"
    }


# API v1 endpoints
@app.get("/api/v1/status")
async def api_status():
    """–°—Ç–∞—Ç—É—Å API"""
    return {
        "api_version": "v1",
        "status": "online",
        "cors_enabled": True,
        "endpoints": {
            "health": "/health",
            "docs": "/docs",
            "api": "/api/v1/",
            "auth": "/api/v1/auth/",
            "cors_test": "/api/v1/cors-test"
        }
    }


# –ë–∞–∑–æ–≤—ã–µ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@app.get("/api/v1/devices")
async def get_devices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "devices": [],
        "total": 0,
        "message": "Service is running, but no devices configured yet"
    }


@app.get("/api/v1/stats/overview")
async def get_stats_overview():
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "total_devices": 0,
        "online_devices": 0,
        "offline_devices": 0,
        "total_requests": 0,
        "success_rate": 0,
        "uptime": time.time()
    }


# Admin endpoints
@app.get("/admin/system/health")
async def admin_system_health():
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "status": "healthy",
        "components": {
            "proxy_server": "running",
            "database": "up",
            "redis": "up",
            "device_manager": "up"
        },
        "uptime": time.time(),
        "timestamp": time.time()
    }


@app.get("/admin/modems")
async def admin_get_modems():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Android + USB –º–æ–¥–µ–º—ã + Raspberry Pi)"""
    device_manager = get_device_manager()
    if not device_manager:
        return []
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        await device_manager.discover_all_devices()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        all_devices = await device_manager.get_all_devices()

        devices_list = []
        for device_id, device_info in all_devices.items():
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
            external_ip = await device_manager.get_device_external_ip(device_id)

            device_data = {
                "modem_id": device_id,  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                "modem_type": device_info['type'],
                "status": device_info['status'],
                "external_ip": external_ip or "Not connected",
                "operator": device_info.get('operator', 'Unknown'),
                "interface": device_info['interface'],
                "device_info": device_info['device_info'],
                "last_rotation": time.time(),
                "total_requests": 0,
                "success_rate": 100.0,
                "auto_rotation": True
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–ª—è
            if device_info['type'] == 'android':
                device_data.update({
                    "manufacturer": device_info.get('manufacturer', 'Unknown'),
                    "model": device_info.get('model', 'Unknown'),
                    "android_version": device_info.get('android_version', 'Unknown'),
                    "battery_level": device_info.get('battery_level', 0),
                    "adb_id": device_info.get('adb_id', ''),
                })
            elif device_info['type'] == 'usb_modem':
                device_data.update({
                    "signal_strength": device_info.get('signal_strength', 'N/A'),
                    "technology": device_info.get('technology', 'Unknown'),
                })
            elif device_info['type'] == 'raspberry_pi':
                device_data.update({
                    "interface_type": "PPP/WWAN",
                })

            devices_list.append(device_data)

        logger.info(f"Returning {len(devices_list)} devices")
        return devices_list

    except Exception as e:
        logger.error(f"Error getting devices: {e}")
        return []


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç endpoint –≤ —Ñ–∞–π–ª backend/app/main.py

@app.get("/admin/modems/{modem_id}")
async def admin_get_modem_by_id(modem_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    device_manager = get_device_manager()
    if not device_manager:
        raise HTTPException(status_code=503, detail="Device manager not available")

    try:
        logger.info(f"Getting info for device: {modem_id}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        all_devices = await device_manager.get_all_devices()

        if modem_id not in all_devices:
            raise HTTPException(status_code=404, detail="Device not found")

        device_info = all_devices[modem_id]
        logger.info(f"Device info: {device_info}")

        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
        external_ip = await device_manager.get_device_external_ip(modem_id)

        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_data = {
            "modem_id": modem_id,
            "modem_type": device_info.get('type', 'unknown'),
            "status": device_info.get('status', 'unknown'),
            "external_ip": external_ip or "Not connected",
            "operator": device_info.get('operator', 'Unknown'),
            "interface": device_info.get('interface', 'Unknown'),
            "device_info": device_info.get('device_info', f"Device {modem_id}"),
            "last_rotation": time.time() - 300,
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "success_rate": 100.0,
            "avg_response_time": 250,
            "auto_rotation": True,
            "rotation_interval": 600,
            "last_seen": device_info.get('last_seen', datetime.now().isoformat()),
            "rotation_methods": device_info.get('rotation_methods', [])
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É
        if device_info.get('type') == 'android':
            device_data.update({
                'manufacturer': device_info.get('manufacturer', 'Unknown'),
                'model': device_info.get('model', 'Unknown'),
                'android_version': device_info.get('android_version', 'Unknown'),
                'battery_level': device_info.get('battery_level', 0),
                'adb_id': device_info.get('adb_id', ''),
            })
        elif device_info.get('type') == 'usb_modem':
            device_data.update({
                'signal_strength': device_info.get('signal_strength', 'N/A'),
                'technology': device_info.get('technology', 'Unknown'),
                'manufacturer': device_info.get('manufacturer', 'Unknown'),
                'model': device_info.get('model', 'Unknown'),
            })
        elif device_info.get('type') == 'raspberry_pi':
            device_data.update({
                'interface_type': 'PPP/WWAN',
                'connection_type': 'Network modem'
            })

        logger.info(f"Returning device data: {device_data}")
        return device_data

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Unexpected error getting device {modem_id}: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–º–∞
@app.get("/admin/modems/{modem_id}/stats")
async def admin_get_modem_stats(modem_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥–µ–º–∞"""
    device_manager = get_device_manager()
    if not device_manager:
        return []
    try:
        all_modems = await device_manager.get_all_devices()

        if modem_id not in all_modems:
            raise HTTPException(status_code=404, detail="Modem not found")

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î)
        stats = {
            "modem_id": modem_id,
            "requests_today": 156,
            "successful_requests_today": 142,
            "failed_requests_today": 14,
            "success_rate_today": 91.0,
            "avg_response_time_today": 245,
            "unique_ips_today": 8,
            "data_transferred_mb_today": 23.4,
            "last_24h_stats": [
                {"hour": "00:00", "requests": 12, "success_rate": 95},
                {"hour": "01:00", "requests": 8, "success_rate": 100},
                {"hour": "02:00", "requests": 3, "success_rate": 100},
                # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
            ],
            "ip_history": [
                {"ip": "192.168.1.100", "first_seen": "2025-07-06T08:00:00", "requests": 45},
                {"ip": "192.168.1.101", "first_seen": "2025-07-06T09:30:00", "requests": 38},
                {"ip": "192.168.1.102", "first_seen": "2025-07-06T10:15:00", "requests": 23},
            ]
        }

        return stats

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting stats for modem {modem_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–º–∞
@app.put("/admin/modems/{modem_id}")
async def admin_update_modem(modem_id: str, update_data: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–º–∞"""
    device_manager = get_device_manager()
    if not device_manager:
        return []
    try:
        all_modems = await device_manager.get_all_devices()

        if modem_id not in all_modems:
            raise HTTPException(status_code=404, detail="Modem not found")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏, –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∏ —Ç.–¥.

        logger.info(f"Updated settings for modem {modem_id}: {update_data}")

        return {
            "message": f"Modem {modem_id} updated successfully",
            "updated_fields": list(update_data.keys())
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error updating modem {modem_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–º–∞
@app.delete("/admin/modems/{modem_id}")
async def admin_delete_modem(modem_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–º–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    device_manager = get_device_manager()
    if not device_manager:
        return []
    try:
        all_modems = await device_manager.get_all_devices()

        if modem_id not in all_modems:
            raise HTTPException(status_code=404, detail="Modem not found")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–º–∞
        logger.info(f"Deleted modem {modem_id}")

        return {"message": f"Modem {modem_id} deleted successfully"}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting modem {modem_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/admin/modems/scan")
async def scan_modems():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    device_manager = get_device_manager()
    if not device_manager:
        return {"error": "Device manager not available"}
    try:
        logger.info("Manual device scan initiated")
        await device_manager.discover_all_devices()

        all_devices = await device_manager.get_all_devices()

        return {
            "message": "Device scan completed",
            "found_modems": len(all_devices),  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "modems": list(all_devices.keys()),
            "devices_by_type": {
                "android": len([d for d in all_devices.values() if d['type'] == 'android']),
                "usb_modem": len([d for d in all_devices.values() if d['type'] == 'usb_modem']),
                "raspberry_pi": len([d for d in all_devices.values() if d['type'] == 'raspberry_pi'])
            },
            "timestamp": time.time()
        }

    except Exception as e:
        logger.error(f"Error scanning devices: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/stats/overview")
async def stats_overview():
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "total_modems": 3,
        "online_modems": 2,
        "offline_modems": 1,
        "total_requests": 3093,
        "successful_requests": 2876,
        "failed_requests": 217,
        "success_rate": 93,
        "avg_response_time": 245,
        "unique_ips": 15,
        "total_data_transferred": 2.4,
        "uptime": time.time()
    }


@app.get("/api/v1/admin/devices")
async def admin_get_devices():
    """–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "devices": [],
        "total": 0,
        "online": 0,
        "offline": 0,
        "maintenance": 0
    }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.get("/admin/system/config")
async def admin_get_system_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "auto_rotation_enabled": True,
        "default_rotation_interval": 600,
        "max_devices": 50,
        "max_requests_per_minute": 100,
        "health_check_interval": 30
    }


@app.post("/admin/modems/rotate-all")
async def rotate_all_modems():
    """–†–æ—Ç–∞—Ü–∏—è IP –≤—Å–µ—Ö –º–æ–¥–µ–º–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "message": "IP rotation initiated for all modems",
        "total_modems": 3,
        "initiated": 2
    }


@app.post("/admin/modems/{modem_id}/rotate")
async def rotate_modem(modem_id: str):
    """–†–æ—Ç–∞—Ü–∏—è IP –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device_manager = get_device_manager()
    if not device_manager:
        raise HTTPException(status_code=503, detail="Device manager not available")

    try:
        all_devices = await device_manager.get_all_devices()

        if modem_id not in all_devices:
            raise HTTPException(status_code=404, detail="Device not found")

        device = all_devices[modem_id]
        logger.info(f"Starting IP rotation for {modem_id} ({device['type']})")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–æ—Ç–∞—Ü–∏—é
        success = await device_manager.rotate_device_ip(modem_id)

        if success:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π IP
            await asyncio.sleep(2)
            new_ip = await device_manager.get_device_external_ip(modem_id)

            return {
                "message": f"IP rotation completed for {modem_id}",
                "device_id": modem_id,
                "device_type": device['type'],
                "status": "success",
                "new_ip": new_ip,
                "timestamp": time.time()
            }
        else:
            return {
                "message": f"IP rotation failed for {modem_id}",
                "device_id": modem_id,
                "device_type": device['type'],
                "status": "failed",
                "timestamp": time.time()
            }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error rotating device {modem_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/admin/debug/adb")
async def debug_adb():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ADB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    import asyncio
    import subprocess

    debug_info = {
        "adb_status": "unknown",
        "adb_version": None,
        "adb_devices": [],
        "raw_output": "",
        "error_output": "",
        "return_code": None,
        "adb_path": None
    }

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ADB
        which_result = subprocess.run(['which', 'adb'], capture_output=True, text=True)
        debug_info["adb_path"] = which_result.stdout.strip() if which_result.returncode == 0 else "Not found"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ ADB
        try:
            version_result = await asyncio.create_subprocess_exec(
                'adb', 'version',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            version_stdout, version_stderr = await version_result.communicate()
            debug_info["adb_version"] = version_stdout.decode().strip()
        except Exception as e:
            debug_info["adb_version"] = f"Error: {str(e)}"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ adb devices
        result = await asyncio.create_subprocess_exec(
            'adb', 'devices', '-l',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await result.communicate()

        debug_info["return_code"] = result.returncode
        debug_info["raw_output"] = stdout.decode()
        debug_info["error_output"] = stderr.decode()

        if result.returncode == 0:
            debug_info["adb_status"] = "working"

            # –ü–∞—Ä—Å–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            lines = stdout.decode().strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            devices = []

            for line in lines:
                line = line.strip()
                if line:
                    parts = line.split()
                    if len(parts) >= 2:
                        devices.append({
                            "device_id": parts[0],
                            "status": parts[1],
                            "full_line": line
                        })

            debug_info["adb_devices"] = devices
        else:
            debug_info["adb_status"] = "error"

    except FileNotFoundError:
        debug_info["adb_status"] = "not_installed"
        debug_info["error_output"] = "ADB not found in PATH"
    except Exception as e:
        debug_info["adb_status"] = "exception"
        debug_info["error_output"] = str(e)

    return debug_info


@app.get("/admin/debug/udev")
async def debug_udev():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ USB –ø—Ä–∞–≤–∏–ª"""
    import os
    import glob

    debug_info = {
        "udev_rules": [],
        "usb_devices": [],
        "permissions": {}
    }

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª udev –¥–ª—è Android
        udev_files = glob.glob('/etc/udev/rules.d/*android*')
        for file in udev_files:
            try:
                with open(file, 'r') as f:
                    debug_info["udev_rules"].append({
                        "file": file,
                        "content": f.read()
                    })
            except Exception as e:
                debug_info["udev_rules"].append({
                    "file": file,
                    "error": str(e)
                })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        try:
            result = subprocess.run(['lsusb'], capture_output=True, text=True)
            if result.returncode == 0:
                debug_info["usb_devices"] = result.stdout.split('\n')
        except:
            pass

    except Exception as e:
        debug_info["error"] = str(e)

    return debug_info


@app.post("/admin/debug/restart-adb")
async def restart_adb():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ADB —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ADB —Å–µ—Ä–≤–µ—Ä–∞
        kill_result = await asyncio.create_subprocess_exec(
            'adb', 'kill-server',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await kill_result.communicate()

        # –û–∂–∏–¥–∞–Ω–∏–µ
        await asyncio.sleep(2)

        # –ó–∞–ø—É—Å–∫ ADB —Å–µ—Ä–≤–µ—Ä–∞
        start_result = await asyncio.create_subprocess_exec(
            'adb', 'start-server',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await start_result.communicate()

        # –û–∂–∏–¥–∞–Ω–∏–µ
        await asyncio.sleep(3)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices_result = await asyncio.create_subprocess_exec(
            'adb', 'devices',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        devices_stdout, devices_stderr = await devices_result.communicate()

        return {
            "message": "ADB server restarted",
            "kill_code": kill_result.returncode,
            "start_code": start_result.returncode,
            "devices_output": devices_stdout.decode(),
            "devices_error": devices_stderr.decode()
        }

    except Exception as e:
        return {
            "error": str(e),
            "message": "Failed to restart ADB server"
        }

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ endpoints –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# Error handlers
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global exception: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": str(exc) if getattr(settings, 'debug', False) else "Something went wrong"
        }
    )


# Startup event
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Mobile Proxy Service starting up...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        from .models.database import init_db
        await init_db()
        logger.info("‚úÖ Database initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize database: {e}")

    # –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    try:
        from .core.managers import init_managers
        await init_managers()
        logger.info("‚úÖ All managers initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize managers: {e}")

    # –ó–∞–ø—É—Å–∫ ProxyServer –æ—Ç–¥–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    try:
        from .core.managers import get_proxy_server
        proxy_server = get_proxy_server()
        if proxy_server and not proxy_server.is_running():
            await proxy_server.start()
            logger.info("‚úÖ Proxy server started successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to start proxy server: {e}")

    logger.info(f"üì° API running on http://{getattr(settings, 'api_host', '0.0.0.0')}:{getattr(settings, 'api_port', 8000)}")
    logger.info(f"üåê Proxy server running on http://{getattr(settings, 'proxy_host', '0.0.0.0')}:{getattr(settings, 'proxy_port', 8080)}")
    logger.info("‚úÖ Service ready to handle requests")




# Shutdown event
@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üõë Mobile Proxy Service shutting down...")

    try:
        from .core.managers import cleanup_managers
        await cleanup_managers()
        logger.info("‚úÖ All managers stopped successfully")
    except Exception as e:
        logger.error(f"‚ùå Error during cleanup: {e}")


if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=getattr(settings, 'api_host', '0.0.0.0'),
        port=getattr(settings, 'api_port', 8000),
        reload=getattr(settings, 'debug', False)
    )
