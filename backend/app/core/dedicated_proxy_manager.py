# backend/app/core/dedicated_proxy_manager.py

import asyncio
import base64
import aiohttp
from aiohttp import web, BasicAuth
from typing import Dict, Any, Optional, List, Set
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession
import structlog
import socket
import uuid
import base64
import subprocess
import os

from ..models.database import AsyncSessionLocal
from ..models.base import ProxyDevice
from ..utils.security import get_password_hash, verify_password

logger = structlog.get_logger()


class DedicatedProxyServer:
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""

    def __init__(self, device_id: str, port: int, username: str, password: str, device_manager):
        self.device_id = device_id
        self.port = port
        self.username = username
        self.password = password
        self.device_manager = device_manager
        self.app = None
        self.runner = None
        self.site = None
        self._running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π middleware"""
        if self._running:
            logger.info(f"Dedicated proxy server for {self.device_id} already running on port {self.port}")
            return

        try:
            logger.info(f"üöÄ Starting dedicated proxy server for device {self.device_id} on port {self.port}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = web.Application()

            # –û–¢–õ–ê–î–û–ß–ù–´–ô MIDDLEWARE –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            @web.middleware
            async def debug_middleware(request, handler):
                logger.info(f"üî• RAW REQUEST DEBUG:")
                logger.info(f"   Method: {request.method}")
                logger.info(f"   Path: '{request.path}'")
                logger.info(f"   Path_qs: '{request.path_qs}'")
                logger.info(f"   URL: {request.url}")
                logger.info(f"   Query string: '{request.query_string}'")
                logger.info(f"   Headers: {dict(request.headers)}")

                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å raw –¥–∞–Ω–Ω—ã–µ
                try:
                    if hasattr(request, 'transport') and request.transport:
                        transport = request.transport
                        logger.info(f"   Transport: {type(transport)}")
                        if hasattr(transport, 'get_extra_info'):
                            socket_info = transport.get_extra_info('socket')
                            logger.info(f"   Socket: {socket_info}")
                except Exception as e:
                    logger.info(f"   Transport info error: {e}")

                # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π middleware/handler
                response = await handler(request)

                logger.info(f"   Response status: {response.status}")
                return response

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware –ø–µ—Ä–≤—ã–º
            self.app.middlewares.append(debug_middleware)

            # –ì–õ–ê–í–ù–´–ô MIDDLEWARE –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ CONNECT –æ–±—Ä–∞–±–æ—Ç–∫–∏
            @web.middleware
            async def auth_and_connect_middleware(request, handler):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                auth_header = request.headers.get('Proxy-Authorization')
                if not auth_header:
                    logger.info("‚ùå No Proxy-Authorization header")
                    return web.Response(
                        status=407,
                        headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
                        text="Proxy Authentication Required"
                    )

                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ Basic Auth
                    if not auth_header.startswith('Basic '):
                        raise ValueError("Invalid auth method")

                    encoded_credentials = auth_header[6:]
                    decoded_credentials = base64.b64decode(encoded_credentials).decode('utf-8')
                    username, password = decoded_credentials.split(':', 1)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if username != self.username or password != self.password:
                        logger.info(f"‚ùå Invalid credentials: {username}")
                        return web.Response(
                            status=407,
                            headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
                            text="Invalid credentials"
                        )

                    logger.info(f"‚úÖ Authentication successful for: {username}")

                except Exception as e:
                    logger.info(f"‚ùå Authentication error: {e}")
                    return web.Response(
                        status=407,
                        headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
                        text="Authentication error"
                    )

                # üî• –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CONNECT
                if request.method == 'CONNECT':
                    logger.info(f"üîó CONNECT intercepted in middleware - creating tunnel!")

                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º proxy_handler –≤ —Ñ–æ–Ω–µ
                        asyncio.create_task(self.proxy_handler(request))

                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —á—Ç–æ–±—ã aiohttp –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –¥–∞–ª—å—à–µ
                        logger.info("üîÑ CONNECT handler started in background")

                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                        return web.Response(status=200, text="")

                    except Exception as e:
                        logger.error(f"‚ùå CONNECT handler error: {e}")
                        return web.Response(status=502, text="Bad Gateway")

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ä–æ—É—Ç–µ—Ä
                return await handler(request)

            # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            self.app.middlewares.append(auth_and_connect_middleware)

            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–´–ï –†–û–£–¢–´
            # –û–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            async def universal_handler(request):
                logger.info(f"üéØ UNIVERSAL HANDLER: {request.method} '{request.path_qs}'")
                return await self.proxy_handler(request)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö HTTP –º–µ—Ç–æ–¥–æ–≤
            for method in ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS']:
                self.app.router.add_route(method, '/{path:.*}', universal_handler)
                self.app.router.add_route(method, '/', universal_handler)

            logger.info(f"üìã Registered universal route for {self.device_id}")

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–æ–∫–µ—Ç–∞
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()

            self.site = web.TCPSite(
                self.runner,
                '0.0.0.0',
                self.port,
                reuse_address=True,
                reuse_port=True
            )
            await self.site.start()

            self._running = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            await asyncio.sleep(0.2)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ socket
            test_success = False
            for attempt in range(3):
                try:
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                        s.settimeout(2)
                        result = s.connect_ex(('127.0.0.1', self.port))
                        if result == 0:
                            test_success = True
                            break
                        else:
                            logger.warning(f"Connection test failed (attempt {attempt + 1}): {result}")
                            await asyncio.sleep(0.5)
                except Exception as e:
                    logger.warning(f"Connection test error (attempt {attempt + 1}): {e}")
                    await asyncio.sleep(0.5)

            if test_success:
                logger.info(f"‚úÖ Dedicated proxy server started and verified on port {self.port}")
            else:
                logger.error(f"‚ùå Dedicated proxy server started but connection test failed on port {self.port}")

            logger.info(
                "Dedicated proxy server started successfully",
                device_id=self.device_id,
                port=self.port,
                username=self.username
            )

        except Exception as e:
            logger.error(
                "Failed to start dedicated proxy server",
                device_id=self.device_id,
                port=self.port,
                error=str(e)
            )
            self._running = False
            raise

    async def proxy_handler(self, request):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º —Ç—É–Ω–Ω–µ–ª–µ–º"""
        try:
            logger.info(f"üéØ PROXY HANDLER START")
            logger.info(f"   Method: {request.method}")
            logger.info(f"   Path: '{request.path}'")
            logger.info(f"   Path_qs: '{request.path_qs}'")
            logger.info(f"   URL: {request.url}")
            logger.info(f"   Headers: {dict(request.headers)}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            device = await self.device_manager.get_device_by_id(self.device_id)
            if not device or device.get('status') != 'online':
                logger.error(f"Device {self.device_id} not available or offline")
                return web.Response(
                    status=503,
                    text="Device not available"
                )

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CONNECT
            if request.method == 'CONNECT':
                logger.info(f"üîó CONNECT request detected!")

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å target –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç
                target_candidates = [
                    request.headers.get('Host'),
                    request.path_qs.strip('/') if request.path_qs != '/' else None,
                    request.path.strip('/') if request.path != '/' else None,
                    str(request.url.host) + ':' + str(request.url.port) if request.url.host else None
                ]

                target = None
                for candidate in target_candidates:
                    if candidate and candidate.strip():
                        target = candidate.strip()
                        logger.info(f"üéØ Found target candidate: '{target}'")
                        break

                if not target:
                    logger.error(f"‚ùå No target found for CONNECT request")
                    logger.error(f"   Tried candidates: {target_candidates}")
                    return web.Response(
                        status=400,
                        text="Bad Request: No target for CONNECT"
                    )

                logger.info(f"üîó CONNECT target: '{target}'")

                # –ù–ê–°–¢–û–Ø–©–ò–ô –¢–£–ù–ù–ï–õ–¨ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                return await self.handle_connect_direct(request, device, target)

            # HTTP –∑–∞–ø—Ä–æ—Å—ã
            logger.info(f"üåê HTTP request processing...")
            return web.Response(
                status=200,
                text=f"HTTP {request.method} request handled",
                headers={'Content-Type': 'text/plain'}
            )

        except Exception as e:
            logger.error(f"Error in proxy handler: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return web.Response(
                status=500,
                text="Internal proxy error"
            )

    async def handle_connect_direct(self, request, device, target: str):
        """CONNECT –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ transport –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        try:
            # –ü–∞—Ä—Å–∏–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ target
            if ':' in target:
                host, port = target.rsplit(':', 1)
                port = int(port)
            else:
                host = target
                port = 443

            logger.info(f"üîó RAW CONNECT tunnel: {host}:{port} via device {self.device_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            interface = device.get('interface') or device.get('usb_interface')

            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            target_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            target_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if interface and interface != 'unknown':
                try:
                    target_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BINDTODEVICE, interface.encode())
                    logger.info(f"‚úÖ Socket bound to interface: {interface}")
                except OSError as e:
                    logger.warning(f"‚ö†Ô∏è  Failed to bind to interface {interface}: {e}")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            target_sock.setblocking(False)
            try:
                await asyncio.get_event_loop().sock_connect(target_sock, (host, port))
                logger.info(f"‚úÖ Connected to {host}:{port} via interface {interface}")
            except OSError as e:
                target_sock.close()
                logger.error(f"‚ùå Failed to connect to {host}:{port}: {e}")
                return web.Response(status=502, text="Connection failed")

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
            client_transport = request.transport
            if not client_transport:
                target_sock.close()
                return web.Response(status=502, text="No client transport")

            # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç 200 —á–µ—Ä–µ–∑ transport
            success_response = b"HTTP/1.1 200 Connection established\r\n\r\n"
            client_transport.write(success_response)

            logger.info(f"üöÄ Starting RAW tunnel relay")

            # –ù–û–í–´–ô –ü–û–î–•–û–î: –î—É–±–ª–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self.create_socket_tunnel(client_transport, target_sock, host, port)

            return None

        except Exception as e:
            logger.error(f"‚ùå RAW CONNECT error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return web.Response(status=502, text="Bad Gateway")

    async def create_socket_tunnel(self, client_transport, target_sock, host: str, port: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞"""
        try:
            logger.info(f"üîß Creating socket tunnel to {host}:{port}")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–æ–∫–µ—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            original_sock = client_transport.get_extra_info('socket')
            if not original_sock:
                raise Exception("No client socket in transport")

            logger.info(f"‚úÖ Original socket: {original_sock}")

            # –ö–õ–Æ–ß–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: –î—É–±–ª–∏—Ä—É–µ–º file descriptor
            try:
                # –ü–æ–ª—É—á–∞–µ–º file descriptor
                original_fd = original_sock.fileno()
                logger.info(f"‚úÖ Original FD: {original_fd}")

                # –î—É–±–ª–∏—Ä—É–µ–º file descriptor
                new_fd = os.dup(original_fd)
                logger.info(f"‚úÖ Duplicated FD: {new_fd}")

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç –∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ FD
                new_sock = socket.fromfd(new_fd, socket.AF_INET, socket.SOCK_STREAM)
                new_sock.setblocking(False)

                logger.info(f"‚úÖ New independent socket: {new_sock}")

            except Exception as e:
                logger.error(f"‚ùå Socket duplication failed: {e}")
                # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å transport –Ω–∞–ø—Ä—è–º—É—é
                return await self.create_transport_tunnel(client_transport, target_sock, host, port)

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã aiohttp –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–≤–µ—Ç 200
            await asyncio.sleep(0.2)

            # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å —Å –Ω–æ–≤—ã–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Å–æ–∫–µ—Ç–æ–º
            await self.run_independent_tunnel(new_sock, target_sock, host, port)

        except Exception as e:
            logger.error(f"‚ùå Socket tunnel error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

            try:
                target_sock.close()
            except:
                pass

    async def run_independent_tunnel(self, client_sock, target_sock, host: str, port: int):
        """–¢—É–Ω–Ω–µ–ª—å —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ —Å–æ–∫–µ—Ç–∞–º–∏"""
        try:
            logger.info(f"üîÑ Starting INDEPENDENT tunnel to {host}:{port}")
            logger.info(f"‚úÖ Client socket: {client_sock}")
            logger.info(f"‚úÖ Target socket: {target_sock}")

            # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ —Å–æ–∫–µ—Ç–∞–º–∏
            async def forward_data_independent(from_sock, to_sock, direction):
                try:
                    total_bytes = 0
                    buffer_size = 8192

                    while True:
                        try:
                            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ asyncio
                            data = await asyncio.get_event_loop().sock_recv(from_sock, buffer_size)
                            if not data:
                                logger.debug(f"üì§ IND {direction}: EOF")
                                break

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ asyncio
                            await asyncio.get_event_loop().sock_sendall(to_sock, data)
                            total_bytes += len(data)

                            # –õ–æ–≥–∏—Ä—É–µ–º SSL handshake
                            if total_bytes < 1024:  # –ü–µ—Ä–≤—ã–µ 1KB
                                logger.debug(f"üîê SSL {direction}: {len(data)} bytes, total: {total_bytes}")

                        except (ConnectionResetError, BrokenPipeError, OSError) as e:
                            if e.errno in (9, 104, 32, 107):  # –†–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                                logger.debug(f"üì§ IND {direction}: connection closed ({e})")
                            else:
                                logger.warning(f"üì§ IND {direction}: socket error {e}")
                            break

                    logger.info(f"‚úÖ IND {direction}: finished, {total_bytes} bytes total")

                except asyncio.CancelledError:
                    logger.debug(f"üö´ IND {direction}: cancelled")
                except Exception as e:
                    logger.error(f"‚ùå IND {direction}: error {e}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            client_to_server = asyncio.create_task(
                forward_data_independent(client_sock, target_sock, f"client -> {host}:{port}")
            )
            server_to_client = asyncio.create_task(
                forward_data_independent(target_sock, client_sock, f"{host}:{port} -> client")
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            try:
                done, pending = await asyncio.wait(
                    [client_to_server, server_to_client],
                    return_when=asyncio.FIRST_COMPLETED,
                    timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                )

                logger.info(f"üîö Independent tunnel completed for {host}:{port}")

            except asyncio.TimeoutError:
                logger.info(f"‚è∞ Independent tunnel timeout for {host}:{port}")
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                for task in [client_to_server, server_to_client]:
                    if not task.done():
                        task.cancel()
                        try:
                            await task
                        except asyncio.CancelledError:
                            pass

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
                try:
                    client_sock.close()
                except:
                    pass
                try:
                    target_sock.close()
                except:
                    pass

            logger.info(f"üèÅ Independent tunnel ended for {host}:{port}")

        except Exception as e:
            logger.error(f"‚ùå Independent tunnel error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                client_sock.close()
            except:
                pass
            try:
                target_sock.close()
            except:
                pass

    async def create_transport_tunnel(self, client_transport, target_sock, host: str, port: int):
        """Fallback —Ç—É–Ω–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è transport –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            logger.info(f"üîÑ Starting TRANSPORT tunnel to {host}:{port}")

            # –ñ–¥–µ–º —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç 200 –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
            await asyncio.sleep(0.3)

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ transport –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ target
            async def read_from_transport():
                try:
                    total_bytes = 0
                    while True:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ transport
                            # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º
                            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                            # –ï—Å–ª–∏ transport –∑–∞–∫—Ä—ã–ª—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º
                            if client_transport.is_closing():
                                logger.info("üì§ Transport closed")
                                break

                        except Exception as e:
                            logger.info(f"üì§ Transport read error: {e}")
                            break

                    logger.info(f"‚úÖ Transport reader finished: {total_bytes} bytes")

                except Exception as e:
                    logger.error(f"‚ùå Transport reader error: {e}")

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ target –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ transport
            async def read_from_target():
                try:
                    total_bytes = 0
                    buffer_size = 8192

                    while True:
                        try:
                            data = await asyncio.get_event_loop().sock_recv(target_sock, buffer_size)
                            if not data:
                                logger.info("üì§ Target EOF")
                                break

                            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ transport
                            client_transport.write(data)
                            total_bytes += len(data)

                            if total_bytes < 1024:
                                logger.debug(f"üîê Target->Client: {len(data)} bytes")

                        except Exception as e:
                            logger.info(f"üì§ Target read error: {e}")
                            break

                    logger.info(f"‚úÖ Target reader finished: {total_bytes} bytes")

                except Exception as e:
                    logger.error(f"‚ùå Target reader error: {e}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏
            transport_task = asyncio.create_task(read_from_transport())
            target_task = asyncio.create_task(read_from_target())

            try:
                await asyncio.wait(
                    [transport_task, target_task],
                    return_when=asyncio.FIRST_COMPLETED,
                    timeout=300
                )
            except asyncio.TimeoutError:
                logger.info("‚è∞ Transport tunnel timeout")
            finally:
                transport_task.cancel()
                target_task.cancel()

                try:
                    target_sock.close()
                except:
                    pass

            logger.info(f"üèÅ Transport tunnel ended for {host}:{port}")

        except Exception as e:
            logger.error(f"‚ùå Transport tunnel error: {e}")

    async def hijack_connection_for_tunnel(self, client_transport, target_sock, host: str, port: int):
        """–ó–∞—Ö–≤–∞—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è raw —Ç—É–Ω–Ω–µ–ª—è"""
        try:
            logger.info(f"üîß Hijacking connection for tunnel to {host}:{port}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫–µ—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            client_sock = client_transport.get_extra_info('socket')
            if not client_sock:
                raise Exception("No client socket in transport")

            logger.info(f"‚úÖ Client socket extracted: {client_sock}")

            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º transport –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–∫–µ—Ç
                if hasattr(client_transport, '_protocol'):
                    protocol = client_transport._protocol

                    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ HTTP –ø–∞—Ä—Å–µ—Ä—ã
                    if hasattr(protocol, '_request_parser'):
                        protocol._request_parser = None
                    if hasattr(protocol, '_upgrade'):
                        protocol._upgrade = True
                    if hasattr(protocol, '_message_tail'):
                        protocol._message_tail = b''

                    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç —Å–æ–∫–µ—Ç–∞ (–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç)
                    if hasattr(protocol, 'transport'):
                        protocol.transport = None

                    logger.info("üîß HTTP protocol completely disabled")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Error disabling HTTP protocol: {e}")

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã aiohttp –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            await asyncio.sleep(0.1)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
            client_sock.setblocking(False)
            target_sock.setblocking(False)

            logger.info(f"üöÄ Starting raw TCP tunnel")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–∏—Å—Ç—ã–π TCP —Ç—É–Ω–Ω–µ–ª—å –ë–ï–ó —É—á–∞—Å—Ç–∏—è aiohttp
            await self.run_pure_tcp_tunnel(client_sock, target_sock, host, port)

        except Exception as e:
            logger.error(f"‚ùå Connection hijack error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                target_sock.close()
            except:
                pass

    async def run_pure_tcp_tunnel(self, client_sock, target_sock, host: str, port: int):
        """–ß–∏—Å—Ç—ã–π TCP —Ç—É–Ω–Ω–µ–ª—å –±–µ–∑ —É—á–∞—Å—Ç–∏—è aiohttp"""
        try:
            logger.info(f"üîÑ Starting PURE TCP tunnel to {host}:{port}")

            # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
            async def forward_data_pure(from_sock, to_sock, direction):
                try:
                    total_bytes = 0
                    buffer_size = 8192

                    while True:
                        try:
                            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ asyncio loop
                            data = await asyncio.get_event_loop().sock_recv(from_sock, buffer_size)
                            if not data:
                                logger.debug(f"üì§ PURE {direction}: EOF")
                                break

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ asyncio loop
                            await asyncio.get_event_loop().sock_sendall(to_sock, data)
                            total_bytes += len(data)

                            # –õ–æ–≥–∏—Ä—É–µ–º SSL handshake
                            if total_bytes < 1024:  # –ü–µ—Ä–≤—ã–µ 1KB (SSL handshake)
                                logger.debug(f"üîê SSL {direction}: {len(data)} bytes, total: {total_bytes}")

                        except (ConnectionResetError, BrokenPipeError, OSError) as e:
                            if e.errno in (9, 104, 32, 107):  # EBADF, ECONNRESET, EPIPE, ENOTCONN
                                logger.debug(f"üì§ PURE {direction}: connection closed ({e})")
                            else:
                                logger.warning(f"üì§ PURE {direction}: socket error {e}")
                            break

                    logger.info(f"‚úÖ PURE {direction}: finished, {total_bytes} bytes total")

                except asyncio.CancelledError:
                    logger.debug(f"üö´ PURE {direction}: cancelled")
                except Exception as e:
                    logger.error(f"‚ùå PURE {direction}: error {e}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            client_to_server = asyncio.create_task(
                forward_data_pure(client_sock, target_sock, f"client -> {host}:{port}")
            )
            server_to_client = asyncio.create_task(
                forward_data_pure(target_sock, client_sock, f"{host}:{port} -> client")
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            try:
                done, pending = await asyncio.wait(
                    [client_to_server, server_to_client],
                    return_when=asyncio.FIRST_COMPLETED,
                    timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                )

                logger.info(f"üîö Pure TCP tunnel completed for {host}:{port}")

            except asyncio.TimeoutError:
                logger.info(f"‚è∞ Pure TCP tunnel timeout for {host}:{port}")
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                for task in [client_to_server, server_to_client]:
                    if not task.done():
                        task.cancel()
                        try:
                            await task
                        except asyncio.CancelledError:
                            pass

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
                try:
                    client_sock.close()
                except:
                    pass
                try:
                    target_sock.close()
                except:
                    pass

            logger.info(f"üèÅ Pure TCP tunnel ended for {host}:{port}")

        except Exception as e:
            logger.error(f"‚ùå Pure TCP tunnel error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                client_sock.close()
            except:
                pass
            try:
                target_sock.close()
            except:
                pass

    async def run_raw_tunnel_transport(self, client_transport, target_sock, host: str, port: int):
        """–ó–∞–ø—É—Å–∫ —Å—ã—Ä–æ–≥–æ TCP —Ç—É–Ω–Ω–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è transport –Ω–∞–ø—Ä—è–º—É—é"""
        client_sock = None
        try:
            logger.info(f"üîÑ Starting RAW TCP tunnel to {host}:{port} via transport")

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            client_sock = client_transport.get_extra_info('socket')
            if not client_sock:
                raise Exception("No client socket in transport")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º
            client_sock.setblocking(False)
            target_sock.setblocking(False)

            logger.info(f"‚úÖ Client socket: {client_sock}")
            logger.info(f"‚úÖ Target socket: {target_sock}")

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª
            try:
                if hasattr(client_transport, '_protocol'):
                    protocol = client_transport._protocol
                    if hasattr(protocol, 'close'):
                        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∞ —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª—é—á–∞–µ–º HTTP –ø–∞—Ä—Å–µ—Ä
                        if hasattr(protocol, '_request_parser'):
                            protocol._request_parser = None
                        logger.info("üîß Disabled HTTP parser in protocol")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Failed to disable HTTP parser: {e}")

            # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
            async def forward_data_transport(from_sock, to_sock, direction):
                try:
                    total_bytes = 0
                    buffer_size = 8192

                    while True:
                        try:
                            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            data = await asyncio.get_event_loop().sock_recv(from_sock, buffer_size)
                            if not data:
                                logger.debug(f"üì§ {direction}: EOF")
                                break

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            await asyncio.get_event_loop().sock_sendall(to_sock, data)
                            total_bytes += len(data)

                            # –õ–æ–≥–∏—Ä—É–µ–º SSL handshake
                            if total_bytes < 1024:  # –ü–µ—Ä–≤—ã–µ 1KB
                                logger.debug(f"üîê SSL {direction}: {len(data)} bytes, total: {total_bytes}")

                        except (ConnectionResetError, BrokenPipeError, OSError) as e:
                            if e.errno in (9, 104, 32):  # EBADF, ECONNRESET, EPIPE
                                logger.debug(f"üì§ {direction}: connection closed ({e})")
                            else:
                                logger.warning(f"üì§ {direction}: socket error {e}")
                            break

                    logger.info(f"‚úÖ {direction}: finished, {total_bytes} bytes total")

                except asyncio.CancelledError:
                    logger.debug(f"üö´ {direction}: cancelled")
                except Exception as e:
                    logger.error(f"‚ùå {direction}: error {e}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            client_to_server = asyncio.create_task(
                forward_data_transport(client_sock, target_sock, f"client -> {host}:{port}")
            )
            server_to_client = asyncio.create_task(
                forward_data_transport(target_sock, client_sock, f"{host}:{port} -> client")
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            try:
                done, pending = await asyncio.wait(
                    [client_to_server, server_to_client],
                    return_when=asyncio.FIRST_COMPLETED,
                    timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                )

                logger.info(f"üîö Transport tunnel completed for {host}:{port}")

            except asyncio.TimeoutError:
                logger.info(f"‚è∞ Transport tunnel timeout for {host}:{port}")
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                for task in [client_to_server, server_to_client]:
                    if not task.done():
                        task.cancel()
                        try:
                            await task
                        except asyncio.CancelledError:
                            pass

        except Exception as e:
            logger.error(f"‚ùå Transport tunnel error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç—ã
            try:
                if client_sock:
                    client_sock.close()
            except:
                pass
            try:
                target_sock.close()
            except:
                pass
            try:
                client_transport.close()
            except:
                pass

            logger.info(f"üèÅ Transport tunnel ended for {host}:{port}")

    async def universal_handler(self, request):
        logger.info(f"üéØ UNIVERSAL HANDLER: {request.method} '{request.path_qs}'")
        return await self.proxy_handler(request)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        if not self._running:
            return

        try:
            if self.site:
                await self.site.stop()
                self.site = None

            if self.runner:
                await self.runner.cleanup()
                self.runner = None

            self.app = None
            self._running = False

            logger.info(
                "Dedicated proxy server stopped",
                device_id=self.device_id,
                port=self.port
            )

        except Exception as e:
            logger.error(
                "Error stopping dedicated proxy server",
                device_id=self.device_id,
                port=self.port,
                error=str(e)
            )

    def is_running(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._running

    async def handle_http(self, request, device):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL –∏–∑ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        target_url = str(request.url)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = dict(request.headers)
        headers.pop('Proxy-Authorization', None)
        headers.pop('Host', None)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=request.method,
                    url=target_url,
                    headers=headers,
                    data=await request.read() if request.content_length else None
                ) as response:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    body = await response.read()

                    return web.Response(
                        status=response.status,
                        headers=dict(response.headers),
                        body=body
                    )

        except Exception as e:
            logger.error(
                "Error proxying HTTP request",
                device_id=self.device_id,
                target_url=target_url,
                error=str(e)
            )
            return web.Response(
                status=502,
                text="Bad Gateway"
            )

    async def handle_http_via_device_interface(self, request, target_url, device):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_type = device.get('type')
            interface = device.get('interface') or device.get('usb_interface')

            logger.info(f"Processing via device type: {device_type}, interface: {interface}")

            # –ï—Å–ª–∏ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å USB –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º curl
            if device_type == 'android' and interface and interface != 'unknown':
                logger.info(f"Using Android interface routing via {interface}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É curl —á—Ç–æ –∏ –≤ proxy_server.py
                curl_result = await self.force_curl_via_interface(request, target_url, interface)

                if curl_result:
                    return web.Response(
                        text=curl_result.get('body', ''),
                        status=curl_result.get('status', 200),
                        headers={
                            **curl_result.get('headers', {}),
                            'X-Dedicated-Proxy-Device': self.device_id,
                            'X-Dedicated-Proxy-Interface': interface
                        }
                    )

            # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É HTTP –∑–∞–ø—Ä–æ—Å—É
            logger.info("Using fallback HTTP client")
            return await self.handle_http_fallback(request, target_url)

        except Exception as e:
            logger.error(f"Error in handle_http_via_device_interface: {e}")
            return await self.handle_http_fallback(request, target_url)

    async def force_curl_via_interface(self, request, target_url: str, interface_name: str):
        """–ö–æ–ø–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ proxy_server.py –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            logger.info(f"üîß DEDICATED PROXY: curl via interface: {interface_name}")
            logger.info(f"üéØ Target URL: {target_url}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            method = request.method
            headers = dict(request.headers)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            body = None
            if method in ['POST', 'PUT', 'PATCH']:
                body = await request.read()

            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers.pop('Host', None)
            headers.pop('Content-Length', None)
            headers.pop('Proxy-Authorization', None)

            # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ curl
            cmd = [
                "curl",
                "--interface", interface_name,
                "--silent",
                "--show-error",
                "--fail-with-body",
                "--max-time", "30",
                "--connect-timeout", "10",
                "--location",
                "--compressed",
                "--header", "Accept: application/json, text/plain, */*",
                "--header", "User-Agent: Dedicated-Proxy-Interface/1.0",
                "--write-out", "\\nHTTPSTATUS:%{http_code}\\nTIME:%{time_total}\\n"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º HTTP –º–µ—Ç–æ–¥
            if method.upper() != "GET":
                cmd.extend(["-X", method.upper()])

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for key, value in headers.items():
                if key.lower() not in ['host', 'content-length', 'connection', 'proxy-authorization']:
                    cmd.extend(["--header", f"{key}: {value}"])

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST/PUT
            if body:
                cmd.extend(["--data-binary", "@-"])

            cmd.append(target_url)

            logger.info(f"üîß Executing dedicated proxy curl command...")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdin=asyncio.subprocess.PIPE if body else None,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            stdout, stderr = await process.communicate(input=body)

            if process.returncode != 0:
                logger.error(f"‚ùå Dedicated proxy curl FAILED! Return code: {process.returncode}")
                logger.error(f"‚ùå stderr: {stderr.decode()}")
                return None

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = stdout.decode().strip()
            logger.info(f"üéâ Dedicated proxy curl SUCCESS! Output length: {len(output)}")

            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            lines = output.split('\n')
            status_code = 200
            response_time = 0.0
            body_lines = []

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            for line in lines:
                if line.startswith('HTTPSTATUS:'):
                    status_code = int(line.split(':')[1])
                elif line.startswith('TIME:'):
                    response_time = float(line.split(':')[1])
                elif line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    body_lines.append(line)

            response_body = '\n'.join(body_lines)

            logger.info(f"üéâ SUCCESS! Dedicated proxy interface {interface_name} -> Status {status_code}")

            return {
                'body': response_body,
                'status': status_code,
                'headers': {
                    'Content-Type': 'application/json',
                    'X-Proxy-Interface': interface_name,
                    'X-Proxy-Via': 'dedicated-curl'
                },
                'response_time': response_time
            }

        except Exception as e:
            logger.error(f"‚ùå Exception in dedicated proxy force_curl_via_interface: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return None

    async def handle_http_fallback(self, request, target_url):
        """Fallback HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers = dict(request.headers)
            headers.pop('Proxy-Authorization', None)
            headers.pop('Host', None)

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=request.method,
                    url=target_url,
                    headers=headers,
                    data=await request.read() if request.content_length else None
                ) as response:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    body = await response.read()

                    return web.Response(
                        status=response.status,
                        headers={
                            **dict(response.headers),
                            'X-Dedicated-Proxy-Device': self.device_id,
                            'X-Dedicated-Proxy-Fallback': 'true'
                        },
                        body=body
                    )

        except Exception as e:
            logger.error(
                "Error in dedicated proxy fallback",
                device_id=self.device_id,
                target_url=target_url,
                error=str(e)
            )
            return web.Response(
                status=502,
                text="Bad Gateway"
            )


class DedicatedProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤"""

    def __init__(self, device_manager):
        self.device_manager = device_manager
        self.proxy_servers: Dict[str, DedicatedProxyServer] = {}
        self.used_ports: Set[int] = set()
        self.port_range_start = 6001
        self.port_range_end = 7000
        self._running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        if self._running:
            return

        logger.info("Starting dedicated proxy manager")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        await self.load_existing_proxies()

        self._running = True
        logger.info("Dedicated proxy manager started")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        if not self._running:
            return

        logger.info("Stopping dedicated proxy manager")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤
        for proxy_server in self.proxy_servers.values():
            await proxy_server.stop()

        self.proxy_servers.clear()
        self.used_ports.clear()
        self._running = False

        logger.info("Dedicated proxy manager stopped")

    async def load_existing_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏-–Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –ø–æ—Ä—Ç–æ–≤"""
        try:
            async with AsyncSessionLocal() as db:
                stmt = select(ProxyDevice).where(
                    ProxyDevice.proxy_enabled == True,
                    ProxyDevice.dedicated_port.is_not(None)
                )
                result = await db.execute(stmt)
                devices = result.scalars().all()

                logger.info(f"Found {len(devices)} devices with dedicated proxies in database")

                for device in devices:
                    logger.info(f"Loading proxy for device: {device.name} on port {device.dedicated_port}")
                    try:
                        port = device.dedicated_port

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
                        port_available = await self.is_port_available(port)

                        if not port_available:
                            logger.warning(f"Port {port} is not available, trying to force cleanup...")

                            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç
                            freed = await self.force_free_port(port)

                            if not freed:
                                logger.error(f"‚ùå Could not free port {port}, skipping device {device.name}")
                                continue

                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        await asyncio.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞

                        await self.create_dedicated_proxy(
                            device_id=device.name,
                            port=port,
                            username=device.proxy_username,
                            password=device.proxy_password
                        )
                        logger.info(f"‚úÖ Successfully loaded proxy for {device.name}")

                    except Exception as e:
                        logger.error(f"‚ùå Failed to load proxy for {device.name}: {e}")

        except Exception as e:
            logger.error("Error loading existing proxies", error=str(e))

    async def create_dedicated_proxy(self, device_id: str, port: Optional[int] = None,
                                     username: Optional[str] = None, password: Optional[str] = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ—Ä—Ç–æ–≤"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
            if port is not None:
                if not (self.port_range_start <= port <= self.port_range_end):
                    raise ValueError(f"Port must be in range {self.port_range_start}-{self.port_range_end}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
                if port in self.used_ports:
                    logger.warning(f"Port {port} already in used_ports set, removing...")
                    self.used_ports.discard(port)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏

                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                if not await self.is_port_available(port):
                    logger.warning(f"Port {port} is not available, trying to free it...")
                    freed = await self.force_free_port(port)
                    if not freed:
                        raise ValueError(f"Port {port} is not available and cannot be freed")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if port is None:
                port = await self.allocate_port()

            if username is None:
                username = f"device_{device_id[:8]}"

            if password is None:
                import secrets
                password = secrets.token_urlsafe(16)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞
            if not await self.is_port_available(port):
                raise ValueError(f"Port {port} is not available for creating proxy server")

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
            proxy_server = DedicatedProxyServer(
                device_id=device_id,
                port=port,
                username=username,
                password=password,
                device_manager=self.device_manager
            )

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            await proxy_server.start()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.proxy_servers[device_id] = proxy_server
            self.used_ports.add(port)

            await self.save_proxy_config(device_id, port, username, password)

            logger.info(
                "Dedicated proxy created",
                device_id=device_id,
                port=port,
                username=username
            )

            return {
                "device_id": device_id,
                "port": port,
                "username": username,
                "password": password,
                "proxy_url": f"http://192.168.1.50:{port}",
                "status": "running"
            }

        except Exception as e:
            logger.error(
                "Error creating dedicated proxy",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def remove_dedicated_proxy(self, device_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            proxy_server = self.proxy_servers.get(device_id)
            if proxy_server:
                port = proxy_server.port
                await proxy_server.stop()

                del self.proxy_servers[device_id]
                self.used_ports.discard(port)

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await self.remove_proxy_config(device_id)

                logger.info(
                    "Dedicated proxy removed",
                    device_id=device_id,
                    port=port
                )

        except Exception as e:
            logger.error(
                "Error removing dedicated proxy",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def get_device_proxy_info(self, device_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∫—Å–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        proxy_server = self.proxy_servers.get(device_id)
        if not proxy_server:
            return None

        return {
            "device_id": device_id,
            "port": proxy_server.port,
            "username": proxy_server.username,
            "password": proxy_server.password,
            "proxy_url": f"http://192.168.1.50:{proxy_server.port}",
            "status": "running" if proxy_server.is_running() else "stopped"
        }

    async def list_all_dedicated_proxies(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        proxies = []
        for device_id, proxy_server in self.proxy_servers.items():
            proxy_info = await self.get_device_proxy_info(device_id)
            if proxy_info:
                proxies.append(proxy_info)
        return proxies

    async def allocate_port(self) -> int:
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        for port in range(self.port_range_start, self.port_range_end + 1):
            if port not in self.used_ports and await self.is_port_available(port):
                return port
        raise RuntimeError("No available ports in range")

    async def is_port_available(self, port: int) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ socket bind
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                try:
                    s.bind(('0.0.0.0', port))
                    logger.debug(f"Port {port} is available via socket bind")
                    return True
                except OSError as e:
                    logger.debug(f"Port {port} bind failed: {e}")

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ netstat
                    try:
                        import subprocess
                        result = subprocess.run(
                            ['netstat', '-tuln'],
                            capture_output=True,
                            text=True,
                            timeout=5
                        )
                        if f":{port} " in result.stdout:
                            logger.debug(f"Port {port} is in use according to netstat")
                            return False
                        else:
                            logger.debug(f"Port {port} not found in netstat, may be available")
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å SO_REUSEPORT
                            try:
                                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s2:
                                    s2.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                                    s2.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
                                    s2.bind(('0.0.0.0', port))
                                    logger.debug(f"Port {port} available with SO_REUSEPORT")
                                    return True
                            except OSError:
                                logger.debug(f"Port {port} still not available with SO_REUSEPORT")
                                return False
                    except (subprocess.TimeoutExpired, FileNotFoundError):
                        logger.debug(f"netstat check failed for port {port}")
                        return False

                    return False

        except Exception as e:
            logger.error(f"Error checking port {port} availability: {e}")
            return False

    async def save_proxy_config(self, device_id: str, port: int, username: str, password: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ name, –∞ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å device_id –≤ UUID
                stmt = select(ProxyDevice).where(ProxyDevice.name == device_id)
                result = await db.execute(stmt)
                device = result.scalar_one_or_none()

                if not device:
                    raise ValueError(f"Device with name {device_id} not found in database")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                stmt = update(ProxyDevice).where(
                    ProxyDevice.id == device.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID
                ).values(
                    dedicated_port=port,
                    proxy_username=username,
                    proxy_password=password,
                    proxy_enabled=True
                )
                await db.execute(stmt)
                await db.commit()

        except Exception as e:
            logger.error(
                "Error saving proxy config",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def remove_proxy_config(self, device_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ name
                stmt = select(ProxyDevice).where(ProxyDevice.name == device_id)
                result = await db.execute(stmt)
                device = result.scalar_one_or_none()

                if not device:
                    raise ValueError(f"Device with name {device_id} not found in database")

                stmt = update(ProxyDevice).where(
                    ProxyDevice.id == device.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID
                ).values(
                    dedicated_port=None,
                    proxy_username=None,
                    proxy_password=None,
                    proxy_enabled=False
                )
                await db.execute(stmt)
                await db.commit()

        except Exception as e:
            logger.error(
                "Error removing proxy config",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def verify_proxy_server_running(self, device_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ dedicated proxy —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"""
        try:
            proxy_server = self.proxy_servers.get(device_id)
            if not proxy_server or not proxy_server.is_running():
                logger.error(f"Proxy server for {device_id} not running")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–ª—É—à–∞–µ—Ç—Å—è
            import socket
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                result = s.connect_ex(('192.168.1.50', proxy_server.port))
                if result != 0:
                    logger.error(f"Proxy server port {proxy_server.port} not listening")
                    return False

            logger.info(f"Proxy server for {device_id} is running on port {proxy_server.port}")
            return True

        except Exception as e:
            logger.error(f"Error verifying proxy server: {e}")
            return False

    async def force_free_port(self, port: int) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞"""
        try:
            logger.info(f"üîß Trying to force free port {port}")

            # –ù–∞–π–¥–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç
            try:
                import subprocess

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º lsof –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                result = subprocess.run(
                    ['lsof', '-ti', f':{port}'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )

                if result.returncode == 0 and result.stdout.strip():
                    pids = result.stdout.strip().split('\n')
                    logger.info(f"Found processes using port {port}: {pids}")

                    for pid in pids:
                        if pid.strip():
                            try:
                                logger.info(f"Attempting to kill process {pid}")
                                subprocess.run(['kill', '-TERM', pid.strip()], timeout=5)
                                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                                check_result = subprocess.run(
                                    ['kill', '-0', pid.strip()],
                                    capture_output=True,
                                    timeout=2
                                )

                                if check_result.returncode == 0:
                                    logger.warning(f"Process {pid} still running, force killing")
                                    subprocess.run(['kill', '-KILL', pid.strip()], timeout=5)

                            except subprocess.TimeoutExpired:
                                logger.warning(f"Timeout killing process {pid}")
                            except Exception as e:
                                logger.warning(f"Error killing process {pid}: {e}")

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(2)
                return await self.is_port_available(port)

            except (subprocess.TimeoutExpired, FileNotFoundError):
                logger.warning(f"lsof not available or timeout, trying alternative method")

                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ netstat + grep
                try:
                    result = subprocess.run(
                        ['sh', '-c', f'netstat -tulpn | grep ":{port} " | awk \'{{print $7}}\' | cut -d/ -f1'],
                        capture_output=True,
                        text=True,
                        timeout=10
                    )

                    if result.stdout.strip():
                        pids = [pid.strip() for pid in result.stdout.strip().split('\n') if
                                pid.strip() and pid.strip() != '-']
                        for pid in pids:
                            try:
                                subprocess.run(['kill', '-TERM', pid], timeout=5)
                            except:
                                pass

                        await asyncio.sleep(2)
                        return await self.is_port_available(port)

                except Exception as e:
                    logger.warning(f"Alternative port cleanup method failed: {e}")

                return False

        except Exception as e:
            logger.error(f"Error in force_free_port for port {port}: {e}")
            return False
