# backend/app/core/dedicated_proxy_manager.py

import asyncio
import base64
import aiohttp
from aiohttp import web, BasicAuth
from typing import Dict, Any, Optional, List, Set
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession
import structlog
import socket
import uuid
import base64

from ..models.database import AsyncSessionLocal
from ..models.base import ProxyDevice
from ..utils.security import get_password_hash, verify_password

logger = structlog.get_logger()


class DedicatedProxyServer:
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""

    def __init__(self, device_id: str, port: int, username: str, password: str, device_manager):
        self.device_id = device_id
        self.port = port
        self.username = username
        self.password = password
        self.device_manager = device_manager
        self.app = None
        self.runner = None
        self.site = None
        self._running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        if self._running:
            logger.info(f"Dedicated proxy server for {self.device_id} already running on port {self.port}")
            return

        try:
            logger.info(f"üöÄ Starting dedicated proxy server for device {self.device_id} on port {self.port}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            import socket
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                try:
                    s.bind(('0.0.0.0', self.port))
                    logger.info(f"‚úÖ Port {self.port} is available")
                except OSError as e:
                    logger.error(f"‚ùå Port {self.port} is not available: {e}")
                    raise

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = web.Application()

            # –û–¢–õ–ê–î–û–ß–ù–´–ô MIDDLEWARE –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            @web.middleware
            async def debug_middleware(request, handler):
                logger.info(f"üî• RAW REQUEST DEBUG:")
                logger.info(f"   Method: {request.method}")
                logger.info(f"   Path: '{request.path}'")
                logger.info(f"   Path_qs: '{request.path_qs}'")
                logger.info(f"   URL: {request.url}")
                logger.info(f"   Query string: '{request.query_string}'")
                logger.info(f"   Headers: {dict(request.headers)}")

                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å raw –¥–∞–Ω–Ω—ã–µ
                try:
                    if hasattr(request, 'transport') and request.transport:
                        transport = request.transport
                        logger.info(f"   Transport: {type(transport)}")
                        if hasattr(transport, 'get_extra_info'):
                            socket_info = transport.get_extra_info('socket')
                            logger.info(f"   Socket: {socket_info}")
                except Exception as e:
                    logger.info(f"   Transport info error: {e}")

                # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π middleware/handler
                response = await handler(request)

                logger.info(f"   Response status: {response.status}")
                return response

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware –ø–µ—Ä–≤—ã–º
            self.app.middlewares.append(debug_middleware)

            # AUTH MIDDLEWARE
            # @web.middleware
            # async def debug_middleware(request, handler):
            #     logger.info(f"üî• RAW REQUEST DEBUG:")
            #     logger.info(f"   Method: {request.method}")
            #     logger.info(f"   Path: '{request.path}'")
            #     logger.info(f"   Path_qs: '{request.path_qs}'")
            #     logger.info(f"   URL: {request.url}")
            #     logger.info(f"   Query string: '{request.query_string}'")
            #     logger.info(f"   Headers: {dict(request.headers)}")
            #
            #     # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å raw –¥–∞–Ω–Ω—ã–µ
            #     try:
            #         if hasattr(request, 'transport') and request.transport:
            #             transport = request.transport
            #             logger.info(f"   Transport: {type(transport)}")
            #             if hasattr(transport, 'get_extra_info'):
            #                 socket_info = transport.get_extra_info('socket')
            #                 logger.info(f"   Socket: {socket_info}")
            #     except Exception as e:
            #         logger.info(f"   Transport info error: {e}")
            #
            #     # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π middleware/handler
            #     response = await handler(request)
            #
            #     logger.info(f"   Response status: {response.status}")
            #     return response
            # async def auth_middleware(request, handler):
            #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            #     auth_header = request.headers.get('Proxy-Authorization')
            #     if not auth_header:
            #         logger.info("‚ùå No Proxy-Authorization header")
            #         return web.Response(
            #             status=407,
            #             headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
            #             text="Proxy Authentication Required"
            #         )
            #
            #     try:
            #         # –ü–∞—Ä—Å–∏–Ω–≥ Basic Auth
            #         if not auth_header.startswith('Basic '):
            #             raise ValueError("Invalid auth method")
            #
            #         encoded_credentials = auth_header[6:]
            #         decoded_credentials = base64.b64decode(encoded_credentials).decode('utf-8')
            #         username, password = decoded_credentials.split(':', 1)
            #
            #         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            #         if username != self.username or password != self.password:
            #             logger.info(f"‚ùå Invalid credentials: {username}")
            #             return web.Response(
            #                 status=407,
            #                 headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
            #                 text="Invalid credentials"
            #             )
            #
            #         logger.info(f"‚úÖ Authentication successful for: {username}")
            #
            #     except Exception as e:
            #         logger.info(f"‚ùå Authentication error: {e}")
            #         return web.Response(
            #             status=407,
            #             headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
            #             text="Authentication error"
            #         )
            #
            #     # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            #     return await handler(request)
            #
            # self.app.middlewares.append(debug_middleware)
            #
            # self.app.middlewares.append(auth_middleware)

            @web.middleware
            async def auth_and_connect_middleware(request, handler):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                auth_header = request.headers.get('Proxy-Authorization')
                if not auth_header:
                    logger.info("‚ùå No Proxy-Authorization header")
                    return web.Response(
                        status=407,
                        headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
                        text="Proxy Authentication Required"
                    )

                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ Basic Auth
                    if not auth_header.startswith('Basic '):
                        raise ValueError("Invalid auth method")

                    encoded_credentials = auth_header[6:]
                    decoded_credentials = base64.b64decode(encoded_credentials).decode('utf-8')
                    username, password = decoded_credentials.split(':', 1)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if username != self.username or password != self.password:
                        logger.info(f"‚ùå Invalid credentials: {username}")
                        return web.Response(
                            status=407,
                            headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
                            text="Invalid credentials"
                        )

                    logger.info(f"‚úÖ Authentication successful for: {username}")

                except Exception as e:
                    logger.info(f"‚ùå Authentication error: {e}")
                    return web.Response(
                        status=407,
                        headers={'Proxy-Authenticate': 'Basic realm="Proxy"'},
                        text="Authentication error"
                    )

                # üî• –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º CONNECT –Ω–∞ —É—Ä–æ–≤–Ω–µ middleware
                if request.method == 'CONNECT':
                    logger.info(f"üîó CONNECT intercepted in middleware - bypassing router!")

                    # –í—ã–∑—ã–≤–∞–µ–º proxy_handler –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è —Ä–æ—É—Ç–µ—Ä
                    return await self.proxy_handler(request)

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ä–æ—É—Ç–µ—Ä
                return await handler(request)

            self.app.middlewares.append(auth_and_connect_middleware)

            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–´–ï –†–û–£–¢–´
            # –û–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            async def universal_handler(request):
                logger.info(f"üéØ UNIVERSAL HANDLER: {request.method} '{request.path_qs}'")
                return await self.proxy_handler(request)

            for method in ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS']:
                self.app.router.add_route(method, '/{path:.*}', universal_handler)
                self.app.router.add_route(method, '/', universal_handler)


            # self.app.router.add_route('*', '/{path:.*}', universal_handler)

            logger.info(f"üìã Registered universal route for {self.device_id}")

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()

            self.site = web.TCPSite(self.runner, '0.0.0.0', self.port)
            await self.site.start()

            self._running = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
            await asyncio.sleep(0.1)
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                result = s.connect_ex(('127.0.0.1', self.port))
                if result == 0:
                    logger.info(f"‚úÖ Dedicated proxy server started and listening on port {self.port}")
                else:
                    logger.error(f"‚ùå Dedicated proxy server started but not listening on port {self.port}")

            logger.info(
                "Dedicated proxy server started successfully",
                device_id=self.device_id,
                port=self.port,
                username=self.username
            )

        except Exception as e:
            logger.error(
                "Failed to start dedicated proxy server",
                device_id=self.device_id,
                port=self.port,
                error=str(e)
            )
            self._running = False
            raise

    async def proxy_handler(self, request):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            logger.info(f"üéØ PROXY HANDLER START")
            logger.info(f"   Method: {request.method}")
            logger.info(f"   Path: '{request.path}'")
            logger.info(f"   Path_qs: '{request.path_qs}'")
            logger.info(f"   URL: {request.url}")
            logger.info(f"   Headers: {dict(request.headers)}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            device = await self.device_manager.get_device_by_id(self.device_id)
            if not device or device.get('status') != 'online':
                logger.error(f"Device {self.device_id} not available or offline")
                return web.Response(
                    status=503,
                    text="Device not available"
                )

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CONNECT
            if request.method == 'CONNECT':
                logger.info(f"üîó CONNECT request detected!")

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å target –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç
                target_candidates = [
                    request.headers.get('Host'),
                    request.path_qs.strip('/') if request.path_qs != '/' else None,
                    request.path.strip('/') if request.path != '/' else None,
                    str(request.url.host) + ':' + str(request.url.port) if request.url.host else None
                ]

                target = None
                for candidate in target_candidates:
                    if candidate and candidate.strip():
                        target = candidate.strip()
                        logger.info(f"üéØ Found target candidate: '{target}'")
                        break

                if not target:
                    logger.error(f"‚ùå No target found for CONNECT request")
                    logger.error(f"   Tried candidates: {target_candidates}")
                    return web.Response(
                        status=400,
                        text="Bad Request: No target for CONNECT"
                    )

                logger.info(f"üîó CONNECT target: '{target}'")

                # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è CONNECT
                return web.Response(
                    status=200,
                    text="Connection established",
                    headers={'Connection': 'close'}
                )

            # HTTP –∑–∞–ø—Ä–æ—Å—ã
            logger.info(f"üåê HTTP request processing...")
            return web.Response(
                status=200,
                text=f"HTTP {request.method} request handled",
                headers={'Content-Type': 'text/plain'}
            )

        except Exception as e:
            logger.error(f"Error in proxy handler: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return web.Response(
                status=500,
                text="Internal proxy error"
            )

    async def universal_handler(self, request):
        logger.info(f"üéØ UNIVERSAL HANDLER: {request.method} '{request.path_qs}'")
        return await self.proxy_handler(request)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        if not self._running:
            return

        try:
            if self.site:
                await self.site.stop()
                self.site = None

            if self.runner:
                await self.runner.cleanup()
                self.runner = None

            self.app = None
            self._running = False

            logger.info(
                "Dedicated proxy server stopped",
                device_id=self.device_id,
                port=self.port
            )

        except Exception as e:
            logger.error(
                "Error stopping dedicated proxy server",
                device_id=self.device_id,
                port=self.port,
                error=str(e)
            )

    @web.middleware
    async def auth_middleware(self, request, handler):
        """–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ start()"""
        return await handler(request)

    async def handle_http(self, request, device):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL –∏–∑ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        target_url = str(request.url)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = dict(request.headers)
        headers.pop('Proxy-Authorization', None)
        headers.pop('Host', None)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=request.method,
                    url=target_url,
                    headers=headers,
                    data=await request.read() if request.content_length else None
                ) as response:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    body = await response.read()

                    return web.Response(
                        status=response.status,
                        headers=dict(response.headers),
                        body=body
                    )

        except Exception as e:
            logger.error(
                "Error proxying HTTP request",
                device_id=self.device_id,
                target_url=target_url,
                error=str(e)
            )
            return web.Response(
                status=502,
                text="Bad Gateway"
            )

    async def handle_connect_backup(self, request, device):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CONNECT –∑–∞–ø—Ä–æ—Å–æ–≤ (HTTPS —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CONNECT
        return web.Response(
            status=200,
            text="Connection established"
        )

    async def handle_connect(self, request, device):
        """–ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CONNECT –∑–∞–ø—Ä–æ—Å–æ–≤ (HTTPS —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
        try:
            # –ü–∞—Ä—Å–∏–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            host_port = request.path_qs  # –Ω–∞–ø—Ä–∏–º–µ—Ä "httpbin.org:443"
            if ':' in host_port:
                host, port = host_port.rsplit(':', 1)
                port = int(port)
            else:
                host = host_port
                port = 443

            logger.info(f"üîó CONNECT tunnel: {host}:{port} via device {self.device_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            interface = device.get('interface') or device.get('usb_interface')

            if interface and interface != 'unknown':
                logger.info(f"üîß Creating tunnel via interface: {interface}")
                return await self.create_interface_tunnel(request, host, port, interface)
            else:
                logger.info("üîß Creating standard tunnel (no specific interface)")
                return await self.create_standard_tunnel(request, host, port)

        except Exception as e:
            logger.error(f"‚ùå CONNECT error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return web.Response(
                status=502,
                text="Bad Gateway"
            )

    async def create_interface_tunnel(self, request, host: str, port: int, interface: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            target_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            target_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (—Ç–æ–ª—å–∫–æ –Ω–∞ Linux)
            try:
                target_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BINDTODEVICE, interface.encode())
                logger.info(f"‚úÖ Socket bound to interface: {interface}")
            except OSError as e:
                logger.warning(f"‚ö†Ô∏è  Failed to bind to interface {interface}: {e}, using standard connection")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É

            # –î–µ–ª–∞–µ–º —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º
            target_sock.setblocking(False)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            try:
                await asyncio.get_event_loop().sock_connect(target_sock, (host, port))
                logger.info(f"‚úÖ Connected to {host}:{port} via interface {interface}")
            except OSError as e:
                target_sock.close()
                logger.error(f"‚ùå Failed to connect to {host}:{port}: {e}")
                return web.Response(status=502, text="Connection failed")

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
            client_transport = request.transport
            if not client_transport:
                target_sock.close()
                return web.Response(status=502, text="No client transport")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è
            success_response = b"HTTP/1.1 200 Connection established\r\n\r\n"
            client_transport.write(success_response)
            await asyncio.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É

            logger.info(f"üöÄ Starting bidirectional tunnel for {host}:{port}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º bidirectional —Ç—É–Ω–Ω–µ–ª—å
            await self.run_tunnel(client_transport, target_sock, host, port)

            return web.Response(status=200, text="")

        except Exception as e:
            logger.error(f"‚ùå Interface tunnel error: {e}")
            if 'target_sock' in locals():
                target_sock.close()
            return web.Response(status=502, text="Tunnel creation failed")

    async def create_standard_tunnel(self, request, host: str, port: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç—É–Ω–Ω–µ–ª—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            target_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            target_sock.setblocking(False)

            try:
                await asyncio.get_event_loop().sock_connect(target_sock, (host, port))
                logger.info(f"‚úÖ Connected to {host}:{port} (standard)")
            except OSError as e:
                target_sock.close()
                logger.error(f"‚ùå Failed to connect to {host}:{port}: {e}")
                return web.Response(status=502, text="Connection failed")

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
            client_transport = request.transport
            if not client_transport:
                target_sock.close()
                return web.Response(status=502, text="No client transport")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_response = b"HTTP/1.1 200 Connection established\r\n\r\n"
            client_transport.write(success_response)
            await asyncio.sleep(0.1)

            logger.info(f"üöÄ Starting standard tunnel for {host}:{port}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
            await self.run_tunnel(client_transport, target_sock, host, port)

            return web.Response(status=200, text="")

        except Exception as e:
            logger.error(f"‚ùå Standard tunnel error: {e}")
            if 'target_sock' in locals():
                target_sock.close()
            return web.Response(status=502, text="Connection failed")

    async def run_tunnel(self, client_transport, target_sock, host: str, port: int):
        """–ó–∞–ø—É—Å–∫ bidirectional —Ç—É–Ω–Ω–µ–ª—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            client_sock = client_transport.get_extra_info('socket')
            if not client_sock:
                raise Exception("No client socket available")

            logger.info(f"üîÑ Running tunnel: client <-> {host}:{port}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            client_to_server_task = asyncio.create_task(
                self.forward_data(client_sock, target_sock, f"client -> {host}:{port}")
            )
            server_to_client_task = asyncio.create_task(
                self.forward_data(target_sock, client_sock, f"{host}:{port} -> client")
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á (—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
            try:
                done, pending = await asyncio.wait(
                    [client_to_server_task, server_to_client_task],
                    return_when=asyncio.FIRST_COMPLETED,
                    timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                )

                logger.info(f"üîö Tunnel ended for {host}:{port}")

            except asyncio.TimeoutError:
                logger.info(f"‚è∞ Tunnel timeout for {host}:{port}")
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                client_to_server_task.cancel()
                server_to_client_task.cancel()

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    target_sock.close()
                except:
                    pass

                try:
                    client_transport.close()
                except:
                    pass

        except Exception as e:
            logger.error(f"‚ùå Tunnel run error: {e}")
            try:
                target_sock.close()
            except:
                pass

    async def forward_data(self, from_sock, to_sock, direction: str):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ–∫–µ—Ç–∞–º–∏"""
        try:
            total_bytes = 0
            while True:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞
                try:
                    data = await asyncio.get_event_loop().sock_recv(from_sock, 8192)
                    if not data:
                        logger.debug(f"üì§ {direction}: connection closed (no data)")
                        break

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–µ–≤–æ–π —Å–æ–∫–µ—Ç
                    await asyncio.get_event_loop().sock_sendall(to_sock, data)
                    total_bytes += len(data)

                    if total_bytes % 10240 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10KB
                        logger.debug(f"üìä {direction}: {total_bytes} bytes transferred")

                except ConnectionResetError:
                    logger.debug(f"üì§ {direction}: connection reset")
                    break
                except OSError as e:
                    if e.errno in (9, 104):  # Bad file descriptor or Connection reset
                        logger.debug(f"üì§ {direction}: connection error {e}")
                        break
                    raise

            logger.debug(f"‚úÖ {direction}: finished, total {total_bytes} bytes")

        except asyncio.CancelledError:
            logger.debug(f"üö´ {direction}: cancelled")
        except Exception as e:
            logger.debug(f"‚ùå {direction}: error {e}")
        finally:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–∫–µ—Ç—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            try:
                from_sock.close()
            except:
                pass
            try:
                to_sock.close()
            except:
                pass

    def is_running(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._running

    async def handle_connect_direct(self, request, device, target: str):
        """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CONNECT –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º target"""
        try:
            # –ü–∞—Ä—Å–∏–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ target
            if ':' in target:
                host, port = target.rsplit(':', 1)
                port = int(port)
            else:
                host = target
                port = 443

            logger.info(f"üîó CONNECT tunnel: {host}:{port} via device {self.device_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            interface = device.get('interface') or device.get('usb_interface')

            if interface and interface != 'unknown':
                logger.info(f"üîß Creating tunnel via interface: {interface}")
                return await self.create_interface_tunnel_direct(request, host, port, interface)
            else:
                logger.info("üîß Creating standard tunnel (no specific interface)")
                return await self.create_standard_tunnel_direct(request, host, port)

        except Exception as e:
            logger.error(f"‚ùå CONNECT direct error: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return web.Response(
                status=502,
                text="Bad Gateway"
            )

    async def create_interface_tunnel_direct(self, request, host: str, port: int, interface: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø—Ä—è–º–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            target_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            target_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (—Ç–æ–ª—å–∫–æ –Ω–∞ Linux)
            try:
                target_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BINDTODEVICE, interface.encode())
                logger.info(f"‚úÖ Socket bound to interface: {interface}")
            except OSError as e:
                logger.warning(f"‚ö†Ô∏è  Failed to bind to interface {interface}: {e}, using standard connection")

            # –î–µ–ª–∞–µ–º —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º
            target_sock.setblocking(False)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            try:
                await asyncio.get_event_loop().sock_connect(target_sock, (host, port))
                logger.info(f"‚úÖ Connected to {host}:{port} via interface {interface}")
            except OSError as e:
                target_sock.close()
                logger.error(f"‚ùå Failed to connect to {host}:{port}: {e}")
                return web.Response(status=502, text="Connection failed")

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
            client_transport = request.transport
            if not client_transport:
                target_sock.close()
                return web.Response(status=502, text="No client transport")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è
            success_response = b"HTTP/1.1 200 Connection established\r\n\r\n"
            client_transport.write(success_response)
            await asyncio.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É

            logger.info(f"üöÄ Starting bidirectional tunnel for {host}:{port}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º bidirectional —Ç—É–Ω–Ω–µ–ª—å
            await self.run_tunnel(client_transport, target_sock, host, port)

            return web.Response(status=200, text="")

        except Exception as e:
            logger.error(f"‚ùå Interface tunnel direct error: {e}")
            if 'target_sock' in locals():
                target_sock.close()
            return web.Response(status=502, text="Tunnel creation failed")

    async def create_standard_tunnel_direct(self, request, host: str, port: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç—É–Ω–Ω–µ–ª—è (–ø—Ä—è–º–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            target_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            target_sock.setblocking(False)

            try:
                await asyncio.get_event_loop().sock_connect(target_sock, (host, port))
                logger.info(f"‚úÖ Connected to {host}:{port} (standard)")
            except OSError as e:
                target_sock.close()
                logger.error(f"‚ùå Failed to connect to {host}:{port}: {e}")
                return web.Response(status=502, text="Connection failed")

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
            client_transport = request.transport
            if not client_transport:
                target_sock.close()
                return web.Response(status=502, text="No client transport")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_response = b"HTTP/1.1 200 Connection established\r\n\r\n"
            client_transport.write(success_response)
            await asyncio.sleep(0.1)

            logger.info(f"üöÄ Starting standard tunnel for {host}:{port}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
            await self.run_tunnel(client_transport, target_sock, host, port)

            return web.Response(status=200, text="")

        except Exception as e:
            logger.error(f"‚ùå Standard tunnel direct error: {e}")
            if 'target_sock' in locals():
                target_sock.close()
            return web.Response(status=502, text="Connection failed")

    def _get_target_url_from_request(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è CONNECT –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
            if request.method == 'CONNECT':
                return request.path_qs  # –ù–∞–ø—Ä–∏–º–µ—Ä "httpbin.org:443"

            # –î–ª—è –ø—Ä—è–º—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            if request.path_qs.startswith('http://') or request.path_qs.startswith('https://'):
                return request.path_qs

            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Host –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            host = request.headers.get('Host')
            if host:
                # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–º–æ–º—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É
                proxy_hosts = [
                    f'192.168.1.50:{self.port}',
                    f'127.0.0.1:{self.port}',
                    f'localhost:{self.port}'
                ]

                if host not in proxy_hosts:
                    scheme = 'https' if request.secure else 'http'
                    return f"{scheme}://{host}{request.path_qs}"

            return None

        except Exception as e:
            logger.error(f"Error getting target URL: {e}")
            return None

    async def handle_http_via_device_interface(self, request, target_url, device):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_type = device.get('type')
            interface = device.get('interface') or device.get('usb_interface')

            logger.info(f"Processing via device type: {device_type}, interface: {interface}")

            # –ï—Å–ª–∏ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å USB –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º curl
            if device_type == 'android' and interface and interface != 'unknown':
                logger.info(f"Using Android interface routing via {interface}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É curl —á—Ç–æ –∏ –≤ proxy_server.py
                curl_result = await self.force_curl_via_interface(request, target_url, interface)

                if curl_result:
                    return web.Response(
                        text=curl_result.get('body', ''),
                        status=curl_result.get('status', 200),
                        headers={
                            **curl_result.get('headers', {}),
                            'X-Dedicated-Proxy-Device': self.device_id,
                            'X-Dedicated-Proxy-Interface': interface
                        }
                    )

            # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É HTTP –∑–∞–ø—Ä–æ—Å—É
            logger.info("Using fallback HTTP client")
            return await self.handle_http_fallback(request, target_url)

        except Exception as e:
            logger.error(f"Error in handle_http_via_device_interface: {e}")
            return await self.handle_http_fallback(request, target_url)

    async def force_curl_via_interface(self, request, target_url: str, interface_name: str):
        """–ö–æ–ø–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ proxy_server.py –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            logger.info(f"üîß DEDICATED PROXY: curl via interface: {interface_name}")
            logger.info(f"üéØ Target URL: {target_url}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            method = request.method
            headers = dict(request.headers)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            body = None
            if method in ['POST', 'PUT', 'PATCH']:
                body = await request.read()

            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers.pop('Host', None)
            headers.pop('Content-Length', None)
            headers.pop('Proxy-Authorization', None)

            # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ curl
            cmd = [
                "curl",
                "--interface", interface_name,
                "--silent",
                "--show-error",
                "--fail-with-body",
                "--max-time", "30",
                "--connect-timeout", "10",
                "--location",
                "--compressed",
                "--header", "Accept: application/json, text/plain, */*",
                "--header", "User-Agent: Dedicated-Proxy-Interface/1.0",
                "--write-out", "\\nHTTPSTATUS:%{http_code}\\nTIME:%{time_total}\\n"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º HTTP –º–µ—Ç–æ–¥
            if method.upper() != "GET":
                cmd.extend(["-X", method.upper()])

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for key, value in headers.items():
                if key.lower() not in ['host', 'content-length', 'connection', 'proxy-authorization']:
                    cmd.extend(["--header", f"{key}: {value}"])

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST/PUT
            if body:
                cmd.extend(["--data-binary", "@-"])

            cmd.append(target_url)

            logger.info(f"üîß Executing dedicated proxy curl command...")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdin=asyncio.subprocess.PIPE if body else None,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            stdout, stderr = await process.communicate(input=body)

            if process.returncode != 0:
                logger.error(f"‚ùå Dedicated proxy curl FAILED! Return code: {process.returncode}")
                logger.error(f"‚ùå stderr: {stderr.decode()}")
                return None

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = stdout.decode().strip()
            logger.info(f"üéâ Dedicated proxy curl SUCCESS! Output length: {len(output)}")

            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            lines = output.split('\n')
            status_code = 200
            response_time = 0.0
            body_lines = []

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            for line in lines:
                if line.startswith('HTTPSTATUS:'):
                    status_code = int(line.split(':')[1])
                elif line.startswith('TIME:'):
                    response_time = float(line.split(':')[1])
                elif line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    body_lines.append(line)

            response_body = '\n'.join(body_lines)

            logger.info(f"üéâ SUCCESS! Dedicated proxy interface {interface_name} -> Status {status_code}")

            return {
                'body': response_body,
                'status': status_code,
                'headers': {
                    'Content-Type': 'application/json',
                    'X-Proxy-Interface': interface_name,
                    'X-Proxy-Via': 'dedicated-curl'
                },
                'response_time': response_time
            }

        except Exception as e:
            logger.error(f"‚ùå Exception in dedicated proxy force_curl_via_interface: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return None

    async def handle_http_fallback(self, request, target_url):
        """Fallback HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers = dict(request.headers)
            headers.pop('Proxy-Authorization', None)
            headers.pop('Host', None)

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=request.method,
                    url=target_url,
                    headers=headers,
                    data=await request.read() if request.content_length else None
                ) as response:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    body = await response.read()

                    return web.Response(
                        status=response.status,
                        headers={
                            **dict(response.headers),
                            'X-Dedicated-Proxy-Device': self.device_id,
                            'X-Dedicated-Proxy-Fallback': 'true'
                        },
                        body=body
                    )

        except Exception as e:
            logger.error(
                "Error in dedicated proxy fallback",
                device_id=self.device_id,
                target_url=target_url,
                error=str(e)
            )
            return web.Response(
                status=502,
                text="Bad Gateway"
            )


class DedicatedProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤"""

    def __init__(self, device_manager):
        self.device_manager = device_manager
        self.proxy_servers: Dict[str, DedicatedProxyServer] = {}
        self.used_ports: Set[int] = set()
        self.port_range_start = 6001
        self.port_range_end = 7000
        self._running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        if self._running:
            return

        logger.info("Starting dedicated proxy manager")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        await self.load_existing_proxies()

        self._running = True
        logger.info("Dedicated proxy manager started")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        if not self._running:
            return

        logger.info("Stopping dedicated proxy manager")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤
        for proxy_server in self.proxy_servers.values():
            await proxy_server.stop()

        self.proxy_servers.clear()
        self.used_ports.clear()
        self._running = False

        logger.info("Dedicated proxy manager stopped")

    async def load_existing_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏-–Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                stmt = select(ProxyDevice).where(
                    ProxyDevice.proxy_enabled == True,
                    ProxyDevice.dedicated_port.is_not(None)
                )
                result = await db.execute(stmt)
                devices = result.scalars().all()

                logger.info(f"Found {len(devices)} devices with dedicated proxies in database")

                for device in devices:
                    logger.info(f"Loading proxy for device: {device.name} on port {device.dedicated_port}")
                    try:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
                        await self.create_dedicated_proxy(
                            device_id=device.name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º name —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                            port=device.dedicated_port,
                            username=device.proxy_username,
                            password=device.proxy_password
                        )
                        logger.info(f"‚úÖ Successfully loaded proxy for {device.name}")
                    except Exception as e:
                        logger.error(f"‚ùå Failed to load proxy for {device.name}: {e}")

        except Exception as e:
            logger.error("Error loading existing proxies", error=str(e))

    async def create_dedicated_proxy(self, device_id: str, port: Optional[int] = None,
                                     username: Optional[str] = None, password: Optional[str] = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
            if port is not None:
                if not (self.port_range_start <= port <= self.port_range_end):
                    raise ValueError(f"Port must be in range {self.port_range_start}-{self.port_range_end}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
                if port in self.used_ports or not await self.is_port_available(port):
                    raise ValueError(f"Port {port} is already in use")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if port is None:
                port = await self.allocate_port()

            if username is None:
                username = f"device_{device_id[:8]}"

            if password is None:
                import secrets
                password = secrets.token_urlsafe(16)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ)
            if port in self.used_ports or not await self.is_port_available(port):
                raise ValueError(f"Port {port} is not available")

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
            proxy_server = DedicatedProxyServer(
                device_id=device_id,
                port=port,
                username=username,
                password=password,
                device_manager=self.device_manager
            )

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            await proxy_server.start()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.proxy_servers[device_id] = proxy_server
            self.used_ports.add(port)

            await self.save_proxy_config(device_id, port, username, password)

            logger.info(
                "Dedicated proxy created",
                device_id=device_id,
                port=port,
                username=username
            )

            return {
                "device_id": device_id,
                "port": port,
                "username": username,
                "password": password,
                "proxy_url": f"http://192.168.1.50:{port}",
                "status": "running"
            }

        except Exception as e:
            logger.error(
                "Error creating dedicated proxy",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def remove_dedicated_proxy(self, device_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            proxy_server = self.proxy_servers.get(device_id)
            if proxy_server:
                port = proxy_server.port
                await proxy_server.stop()

                del self.proxy_servers[device_id]
                self.used_ports.discard(port)

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await self.remove_proxy_config(device_id)

                logger.info(
                    "Dedicated proxy removed",
                    device_id=device_id,
                    port=port
                )

        except Exception as e:
            logger.error(
                "Error removing dedicated proxy",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def get_device_proxy_info(self, device_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∫—Å–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        proxy_server = self.proxy_servers.get(device_id)
        if not proxy_server:
            return None

        return {
            "device_id": device_id,
            "port": proxy_server.port,
            "username": proxy_server.username,
            "password": proxy_server.password,
            "proxy_url": f"http://192.168.1.50:{proxy_server.port}",
            "status": "running" if proxy_server.is_running() else "stopped"
        }

    async def list_all_dedicated_proxies(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        proxies = []
        for device_id, proxy_server in self.proxy_servers.items():
            proxy_info = await self.get_device_proxy_info(device_id)
            if proxy_info:
                proxies.append(proxy_info)
        return proxies

    async def allocate_port(self) -> int:
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        for port in range(self.port_range_start, self.port_range_end + 1):
            if port not in self.used_ports and await self.is_port_available(port):
                return port
        raise RuntimeError("No available ports in range")

    async def is_port_available(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('0.0.0.0', port))
                return True
        except OSError:
            return False

    async def save_proxy_config(self, device_id: str, port: int, username: str, password: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ name, –∞ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å device_id –≤ UUID
                stmt = select(ProxyDevice).where(ProxyDevice.name == device_id)
                result = await db.execute(stmt)
                device = result.scalar_one_or_none()

                if not device:
                    raise ValueError(f"Device with name {device_id} not found in database")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                stmt = update(ProxyDevice).where(
                    ProxyDevice.id == device.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID
                ).values(
                    dedicated_port=port,
                    proxy_username=username,
                    proxy_password=password,
                    proxy_enabled=True
                )
                await db.execute(stmt)
                await db.commit()

        except Exception as e:
            logger.error(
                "Error saving proxy config",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def remove_proxy_config(self, device_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ name
                stmt = select(ProxyDevice).where(ProxyDevice.name == device_id)
                result = await db.execute(stmt)
                device = result.scalar_one_or_none()

                if not device:
                    raise ValueError(f"Device with name {device_id} not found in database")

                stmt = update(ProxyDevice).where(
                    ProxyDevice.id == device.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID
                ).values(
                    dedicated_port=None,
                    proxy_username=None,
                    proxy_password=None,
                    proxy_enabled=False
                )
                await db.execute(stmt)
                await db.commit()

        except Exception as e:
            logger.error(
                "Error removing proxy config",
                device_id=device_id,
                error=str(e)
            )
            raise

    async def verify_proxy_server_running(self, device_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ dedicated proxy —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"""
        try:
            proxy_server = self.proxy_servers.get(device_id)
            if not proxy_server or not proxy_server.is_running():
                logger.error(f"Proxy server for {device_id} not running")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–ª—É—à–∞–µ—Ç—Å—è
            import socket
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                result = s.connect_ex(('192.168.1.50', proxy_server.port))
                if result != 0:
                    logger.error(f"Proxy server port {proxy_server.port} not listening")
                    return False

            logger.info(f"Proxy server for {device_id} is running on port {proxy_server.port}")
            return True

        except Exception as e:
            logger.error(f"Error verifying proxy server: {e}")
            return False
