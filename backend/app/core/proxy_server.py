# backend/app/core/proxy_server.py - ENHANCED VERSION WITH DEVICE INTERFACE ROUTING

import asyncio
import aiohttp
from aiohttp import web, ClientSession, ClientTimeout, TCPConnector
import time
import socket
import netifaces
from typing import Optional, Dict, Any, List
from typing import Dict, List, Optional, Tuple
from urllib.parse import urlparse
import structlog
import subprocess
import re
import json
from datetime import datetime, timezone
import psutil
import random


from ..config import settings

logger = structlog.get_logger()


class ProxyServer:
    """HTTP –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""

    def __init__(self, device_manager, stats_collector):
        self.device_manager = device_manager
        self.stats_collector = stats_collector
        self.app = None
        self.runner = None
        self.site = None
        self.session: Optional[ClientSession] = None
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info(f"Starting enhanced proxy server on {settings.proxy_host}:{settings.proxy_port}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = web.Application()
            self.setup_routes()

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()

            self.site = web.TCPSite(
                self.runner,
                settings.proxy_host,
                settings.proxy_port
            )

            await self.site.start()
            self.running = True

            logger.info(f"‚úÖ Proxy server started on {settings.proxy_host}:{settings.proxy_port}")

        except Exception as e:
            logger.error(f"‚ùå Failed to start proxy server: {e}")
            self.running = False
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False

        if self.site:
            await self.site.stop()

        if self.runner:
            await self.runner.cleanup()

        if self.session:
            await self.session.close()

        logger.info("Proxy server stopped")

    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        # –ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.app.router.add_get('/', self.root_handler)

        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
        self.app.router.add_get('/status', self.status_handler)

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.app.router.add_route('*', '/{path:.*}', self.universal_handler)

    async def root_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏"""
        try:
            device_count = 0
            if self.device_manager:
                devices = await self.device_manager.get_all_devices()
                device_count = len(devices)

            return web.json_response({
                "service": "Mobile Proxy Server with Interface Routing",
                "status": "running",
                "version": "2.0.0",
                "available_devices": device_count,
                "features": ["Interface Routing", "IP Rotation", "Device Management"],
                "message": "Enhanced proxy server with device interface routing",
                "examples": {
                    "http": "curl -x http://192.168.1.50:8080 http://httpbin.org/ip",
                    "https": "curl -x http://192.168.1.50:8080 https://httpbin.org/ip",
                    "specific_device": "curl -H 'X-Proxy-Device-ID: android_AH3SCP4B11207250' -x http://192.168.1.50:8080 http://httpbin.org/ip"
                }
            })
        except Exception as e:
            logger.error(f"Error in root handler: {e}")
            return web.json_response({"error": str(e)}, status=500)

    async def status_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏"""
        try:
            device_count = 0
            online_devices = 0
            device_interfaces = []

            if self.device_manager:
                devices = await self.device_manager.get_all_devices()
                device_count = len(devices)
                online_devices = len([d for d in devices.values() if d.get('status') == 'online'])

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                for device_id, device in devices.items():
                    if device.get('status') == 'online':
                        interface_info = await self.get_device_interface_info(device)
                        if interface_info:
                            device_interfaces.append({
                                "device_id": device_id,
                                "device_type": device.get('type'),
                                "interface": interface_info.get('interface'),
                                "ip": interface_info.get('ip'),
                                "routing_method": interface_info.get('routing_method')
                            })

            return web.json_response({
                "proxy_status": "running",
                "total_devices": device_count,
                "online_devices": online_devices,
                "device_interfaces": device_interfaces,
                "proxy_host": settings.proxy_host,
                "proxy_port": settings.proxy_port,
                "supports": ["HTTP", "HTTPS", "Interface Routing"]
            })
        except Exception as e:
            logger.error(f"Error in status handler: {e}")
            return web.json_response({"error": str(e)}, status=500)

    async def universal_handler(self, request: web.Request) -> web.Response:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        start_time = time.time()
        client_ip = self.get_client_ip(request)

        try:
            target_url = self.get_target_url(request)
            if not target_url:
                return web.Response(
                    text="Bad Request: Use as HTTP proxy. Example: curl -x http://192.168.1.50:8080 http://httpbin.org/ip",
                    status=400
                )

            logger.info(f"üì° PROXY REQUEST: {request.method} {target_url} from {client_ip}")

            device = await self.debug_device_selection(request)
            if not device:
                logger.error("‚ùå NO DEVICES AVAILABLE")
                return web.Response(text="No devices available", status=503)

            device_id = device.get('id', 'unknown')
            device_type = device.get('type', 'unknown')
            interface = device.get('interface', 'unknown')

            logger.info(f"‚úÖ SELECTED DEVICE: {device_id}")
            logger.info(f"   Type: {device_type}")
            logger.info(f"   Interface: {interface}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
            if device_type == 'android' and interface == 'enx566cf3eaaf4b':
                logger.info(f"üöÄ USING ANDROID INTERFACE: {interface}")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                connectivity_ok = await self.test_interface_connectivity(interface)
                if connectivity_ok:
                    logger.info(f"‚úÖ Interface {interface} connectivity test passed")
                else:
                    logger.warning(f"‚ö†Ô∏è Interface {interface} connectivity test failed, but trying anyway")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π curl
                response = await self.force_curl_via_interface(request, target_url, interface)

                if response:
                    response_time = int((time.time() - start_time) * 1000)
                    logger.info(f"üéâ SUCCESS via {interface}: {response.status} in {response_time}ms")

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    response.headers['X-Debug-Device-ID'] = device_id
                    response.headers['X-Debug-Success'] = 'true'
                    response.headers['X-Response-Time-Ms'] = str(response_time)

                    return response
                else:
                    logger.error(f"‚ùå IMPROVED CURL STILL FAILED via {interface}")
            else:
                logger.warning(f"‚ö†Ô∏è WRONG DEVICE TYPE OR INTERFACE: type={device_type}, interface={interface}")

            # Fallback
            logger.info("üîÑ USING FALLBACK (this will use server's main interface)")
            response = await self.forward_request_default(request, target_url, device)

            response_time = int((time.time() - start_time) * 1000)
            logger.info(f"‚úÖ Fallback completed: {response.status} in {response_time}ms")

            response.headers['X-Debug-Via-Fallback'] = 'true'
            return response

        except Exception as e:
            logger.error(f"‚ùå ERROR in universal_handler: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return web.Response(text=f"Internal Server Error: {str(e)}", status=500)

    async def get_device_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_type = device.get('type')
            device_id = device.get('id')

            if device_type == 'android':
                return await self.get_android_interface_info(device)
            elif device_type == 'usb_modem':
                return await self.get_usb_modem_interface_info(device)
            elif device_type == 'raspberry_pi':
                return await self.get_raspberry_interface_info(device)

        except Exception as e:
            logger.error(f"Error getting interface info for device {device_id}: {e}")

        return None

    async def get_android_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logger.info(f"üîç Getting interface info for Android device: {device}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            interface = device.get('interface')
            adb_id = device.get('adb_id', device.get('id', 'unknown'))

            logger.info(f"Device interface from data: {interface}")
            logger.info(f"Device ADB ID: {adb_id}")

            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
            if not interface or interface == "unknown" or interface == adb_id:
                logger.warning(f"Interface not set correctly, forcing to enx566cf3eaaf4b")
                interface = "enx566cf3eaaf4b"

            logger.info(f"Using interface: {interface}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            if interface not in netifaces.interfaces():
                logger.error(f"Interface {interface} not found in system")
                return None

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.error(f"No IP address on interface {interface}")
                return None

            ip = addrs[netifaces.AF_INET][0]['addr']
            logger.info(f"Interface {interface} has IP: {ip}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å UP
            try:
                result = subprocess.run(['ip', 'link', 'show', interface],
                                        capture_output=True, text=True, timeout=5)
                if result.returncode == 0 and 'UP' in result.stdout:
                    logger.info(f"‚úÖ Android interface {interface} is UP")
                    return {
                        'interface': interface,
                        'ip': ip,
                        'routing_method': 'curl_interface_binding',
                        'type': 'android_usb_tethering'
                    }
                else:
                    logger.warning(f"Interface {interface} is DOWN, trying to bring UP")
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    subprocess.run(['sudo', 'ip', 'link', 'set', interface, 'up'], timeout=5)
                    return {
                        'interface': interface,
                        'ip': ip,
                        'routing_method': 'curl_interface_binding',
                        'type': 'android_usb_tethering'
                    }
            except subprocess.TimeoutExpired:
                logger.warning(f"Timeout checking interface {interface} status")
                return {
                    'interface': interface,
                    'ip': ip,
                    'routing_method': 'curl_interface_binding',
                    'type': 'android_usb_tethering'
                }

        except Exception as e:
            logger.error(f"Error getting Android interface info: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None

    async def get_usb_modem_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ USB –º–æ–¥–µ–º–∞"""
        try:
            # –ü–æ–∏—Å–∫ PPP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            interfaces = netifaces.interfaces()
            for interface in interfaces:
                if interface.startswith('ppp') or interface.startswith('wwan'):
                    addrs = netifaces.ifaddresses(interface)
                    if netifaces.AF_INET in addrs:
                        return {
                            'interface': interface,
                            'ip': addrs[netifaces.AF_INET][0]['addr'],
                            'routing_method': 'curl_interface_binding',
                            'type': 'usb_modem'
                        }

        except Exception as e:
            logger.error(f"Error getting USB modem interface info: {e}")

        return None

    async def get_raspberry_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Raspberry Pi"""
        try:
            interface = device.get('interface', '')
            if interface and interface in netifaces.interfaces():
                addrs = netifaces.ifaddresses(interface)
                if netifaces.AF_INET in addrs:
                    return {
                        'interface': interface,
                        'ip': addrs[netifaces.AF_INET][0]['addr'],
                        'routing_method': 'curl_interface_binding',
                        'type': 'raspberry_pi'
                    }

        except Exception as e:
            logger.error(f"Error getting Raspberry Pi interface info: {e}")

        return None

    async def forward_request_via_device_interface(self, request, target_url, device):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            logger.info(f"üîÑ Processing request via device: {device.get('id')}")

            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê –î–õ–Ø ANDROID
            if device.get('type') == 'android':
                interface = 'enx566cf3eaaf4b'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                logger.info(f"üöÄ FORCING Android interface: {interface}")

                # –ü—Ä—è–º–æ–π curl –∑–∞–ø—Ä–æ—Å
                curl_cmd = ['curl', '--interface', interface, '--silent', '--max-time', '30', target_url]

                process = await asyncio.create_subprocess_exec(
                    *curl_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
                )
                stdout, stderr = await process.communicate()

                if process.returncode == 0:
                    logger.info(f"‚úÖ SUCCESS via {interface}")
                    return web.Response(
                        body=stdout,
                        status=200,
                        headers={'X-Proxy-Via': f'android-{interface}', 'Content-Type': 'application/json'}
                    )

            logger.warning(f"Falling back to default routing")
            return await self.forward_request_default(request, target_url, device)

        except Exception as e:
            logger.error(f"Error: {e}")
            return await self.forward_request_default(request, target_url, device)

    async def execute_request_via_curl(
        self,
        request: web.Request,
        target_url: str,
        interface: str
    ) -> Optional[web.Response]:
        """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ curl —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            logger.info(f"üöÄ FORCING request via interface: {interface}")
            logger.info(f"Target URL: {target_url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if interface not in netifaces.interfaces():
                logger.error(f"‚ùå Interface {interface} not found")
                return None

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.error(f"‚ùå No IP on interface {interface}")
                return None

            interface_ip = addrs[netifaces.AF_INET][0]['addr']
            logger.info(f"‚úÖ Interface {interface} IP: {interface_ip}")

            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ curl
            curl_cmd = [
                'curl',
                '--interface', interface,
                '--silent',
                '--max-time', '30',
                '--location',
                '--write-out', 'HTTPSTATUS:%{http_code}',
                '--header', f"User-Agent: Mobile-Proxy-Force/1.0",
                target_url
            ]

            logger.info(f"üîß Executing: {' '.join(curl_cmd)}")

            process = await asyncio.create_subprocess_exec(
                *curl_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            logger.info(f"Curl exit code: {process.returncode}")

            if process.returncode == 0:
                output = stdout.decode('utf-8', errors='ignore')
                logger.info(f"Curl output length: {len(output)}")

                # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
                status_code = 200
                response_body = output

                if 'HTTPSTATUS:' in output:
                    try:
                        status_pos = output.rfind('HTTPSTATUS:')
                        status_code = int(output[status_pos + 11:].strip())
                        response_body = output[:status_pos]
                        logger.info(f"‚úÖ Parsed status: {status_code}")
                    except (ValueError, IndexError) as e:
                        logger.warning(f"Failed to parse status: {e}")

                logger.info(f"üéâ SUCCESS! Request via {interface} completed with status {status_code}")

                return web.Response(
                    body=response_body.encode('utf-8'),
                    status=status_code,
                    headers={
                        'X-Forced-Via-Interface': interface,
                        'X-Interface-IP': interface_ip,
                        'X-Forced-Success': 'true',
                        'Content-Type': 'application/json'
                    }
                )
            else:
                error_msg = stderr.decode('utf-8', errors='ignore')
                logger.error(f"‚ùå Curl failed: {error_msg}")
                return None

        except Exception as e:
            logger.error(f"‚ùå Exception in force curl: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None

    async def forward_request_default(
        self,
        request: web.Request,
        target_url: str,
        device: Dict[str, Any]
    ) -> web.Response:
        """Fallback: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            async with ClientSession(
                timeout=ClientTimeout(total=30),
                connector=TCPConnector(limit=10)
            ) as session:

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers = dict(request.headers)
                headers.pop('Host', None)
                headers.pop('X-Proxy-Device-ID', None)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
                body = None
                if request.method in ['POST', 'PUT', 'PATCH']:
                    body = await request.read()

                async with session.request(
                    method=request.method,
                    url=target_url,
                    headers=headers,
                    data=body,
                    allow_redirects=False,
                    ssl=False
                ) as response:
                    response_body = await response.read()
                    response_headers = dict(response.headers)
                    response_headers.pop('Transfer-Encoding', None)
                    response_headers['X-Proxy-Via'] = 'default-routing'

                    return web.Response(
                        body=response_body,
                        status=response.status,
                        headers=response_headers
                    )

        except Exception as e:
            logger.error(f"Error in default request forwarding: {e}")
            return web.Response(text=f"Bad Gateway: {str(e)}", status=502)

    def get_client_ip(self, request: web.Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            forwarded_for = request.headers.get('X-Forwarded-For')
            if forwarded_for:
                return forwarded_for.split(',')[0].strip()

            real_ip = request.headers.get('X-Real-IP')
            if real_ip:
                return real_ip

            transport = request.transport
            if transport:
                peername = transport.get_extra_info('peername')
                if peername:
                    return peername[0]

            return 'unknown'
        except Exception:
            return 'unknown'

    def get_target_url(self, request: web.Request) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –î–ª—è –ø—Ä—è–º—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            if request.path_qs.startswith('http://') or request.path_qs.startswith('https://'):
                return request.path_qs

            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Host –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            host = request.headers.get('Host')
            if host:
                # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–º–æ–º—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É
                proxy_hosts = [
                    '192.168.1.50:8080',
                    '127.0.0.1:8080',
                    'localhost:8080',
                    f'{settings.proxy_host}:{settings.proxy_port}'
                ]

                if host not in proxy_hosts:
                    scheme = 'https' if request.secure else 'http'
                    return f"{scheme}://{host}{request.path_qs}"

            return None

        except Exception as e:
            logger.error(f"Error getting target URL: {e}")
            return None

    async def make_request_via_interface(self, session: aiohttp.ClientSession,
                                         method: str, url: str, interface: str,
                                         headers: dict = None, data: bytes = None) -> aiohttp.ClientResponse:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            import netifaces

            if interface not in netifaces.interfaces():
                raise Exception(f"Interface {interface} not found")

            addresses = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addresses:
                raise Exception(f"No IPv4 address on interface {interface}")

            local_ip = addresses[netifaces.AF_INET][0]['addr']

            # –°–æ–∑–¥–∞–µ–º connector —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É IP
            connector = aiohttp.TCPConnector(
                local_addr=(local_ip, 0),  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ IP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                limit=100,
                limit_per_host=10,
                ttl_dns_cache=300,
                use_dns_cache=True,
            )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —ç—Ç–∏–º connector
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as bound_session:

                logger.debug(f"Making request via interface {interface} (IP: {local_ip})")

                async with bound_session.request(
                    method=method,
                    url=url,
                    headers=headers,
                    data=data,
                    allow_redirects=True
                ) as response:
                    return response

        except Exception as e:
            logger.error(f"Error making request via interface {interface}: {e}")
            raise

    async def select_device(self, request: web.Request) -> Optional[Dict[str, Any]]:
        """–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logger.info("üîç Selecting device for proxy request...")

            if not self.device_manager:
                logger.error("Device manager not available")
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_id = request.headers.get('X-Proxy-Device-ID')
            logger.info(f"Requested device ID: {device_id}")

            if device_id:
                device = await self.device_manager.get_device_by_id(device_id)
                if device:
                    logger.info(f"‚úÖ Found requested device: {device}")
                    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
                    if device.get('type') == 'android' and device.get('adb_id') == 'AH3SCP4B11207250':
                        device['interface'] = 'enx566cf3eaaf4b'
                        device['status'] = 'online'
                        logger.info(f"üîß Forced interface to enx566cf3eaaf4b for Android device")
                    return device
                else:
                    logger.warning(f"Requested device {device_id} not found")

            # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device = await self.device_manager.get_random_device()
            if device:
                logger.info(f"‚úÖ Selected random device: {device}")
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
                if device.get('type') == 'android' and device.get('adb_id') == 'AH3SCP4B11207250':
                    device['interface'] = 'enx566cf3eaaf4b'
                    device['status'] = 'online'
                    logger.info(f"üîß Forced interface to enx566cf3eaaf4b for Android device")
                return device
            else:
                logger.warning("No online devices available")

                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–û–ó–î–ê–ï–ú Android –£–°–¢–†–û–ô–°–¢–í–û
                logger.info("üö® Creating emergency Android device...")
                emergency_device = {
                    'id': 'android_AH3SCP4B11207250',
                    'type': 'android',
                    'interface': 'enx566cf3eaaf4b',
                    'adb_id': 'AH3SCP4B11207250',
                    'status': 'online',
                    'device_info': 'Emergency Android Device'
                }
                logger.info(f"‚úÖ Emergency device created: {emergency_device}")
                return emergency_device

        except Exception as e:
            logger.error(f"Error selecting device: {e}")
            return None

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return self.running

    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.device_manager:
                device_summary = await self.device_manager.get_summary()
            else:
                device_summary = {"total_devices": 0, "online_devices": 0}

            return {
                "devices": device_summary,
                "server_info": {
                    "running": self.running,
                    "host": settings.proxy_host,
                    "port": settings.proxy_port,
                    "routing_method": "device_interface_binding",
                    "supports_interface_routing": True
                }
            }

        except Exception as e:
            logger.error(f"Error getting proxy stats: {e}")
            return {"error": str(e)}

    async def handle_request(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""

        try:
            # –í—ã–±–∏—Ä–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            selected_modem = await self.select_modem()
            if not selected_modem:
                return web.Response(text="No modems available", status=503)

            modem_id = selected_modem['id']

            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            route = await self.get_route_for_modem(modem_id)
            if not route:
                logger.warning(f"No route available for modem {modem_id}")
                return web.Response(text="No route available", status=503)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            target_url = str(request.url).replace(str(request.url.with_path('/').with_query('')), '')
            if not target_url.startswith('http'):
                target_url = f"http://{target_url}"

            # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Å–∫–ª—é—á–∞—è hop-by-hop –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {}
            for name, value in request.headers.items():
                if name.lower() not in ['connection', 'upgrade', 'proxy-authenticate', 'proxy-authorization', 'te',
                                        'trailers', 'transfer-encoding']:
                    headers[name] = value

            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()

            start_time = time.time()

            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
                async with aiohttp.ClientSession() as session:

                    if route.get('method') == 'interface_binding':
                        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        interface = route.get('interface')
                        logger.debug(f"Making request via interface {interface}")

                        response = await self.make_request_via_interface(
                            session, request.method, target_url, interface, headers, body
                        )
                    else:
                        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        async with session.request(
                            method=request.method,
                            url=target_url,
                            headers=headers,
                            data=body
                        ) as response:
                            pass

                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                    response_body = await response.read()
                    response_headers = {}

                    for name, value in response.headers.items():
                        if name.lower() not in ['connection', 'transfer-encoding']:
                            response_headers[name] = value

                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    elapsed = time.time() - start_time
                    logger.info(
                        f"Request completed via {modem_id}",
                        method=request.method,
                        url=target_url,
                        status=response.status,
                        elapsed=f"{elapsed:.2f}s",
                        interface=route.get('interface', 'unknown')
                    )

                    return web.Response(
                        body=response_body,
                        status=response.status,
                        headers=response_headers
                    )

            except Exception as e:
                elapsed = time.time() - start_time
                logger.error(
                    f"Request failed via {modem_id}",
                    method=request.method,
                    url=target_url,
                    error=str(e),
                    elapsed=f"{elapsed:.2f}s"
                )
                return web.Response(text=f"Request failed: {str(e)}", status=502)

        except Exception as e:
            logger.error(f"Error handling request: {e}")
            return web.Response(text="Internal server error", status=500)

    async def test_interface_routing(self, interface: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            logger.info(f"üß™ Testing interface routing for {interface}")

            if interface not in netifaces.interfaces():
                logger.error(f"Interface {interface} not found")
                return False

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.error(f"No IP on interface {interface}")
                return False

            interface_ip = addrs[netifaces.AF_INET][0]['addr']
            logger.info(f"Interface {interface} has IP: {interface_ip}")

            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            process = await asyncio.create_subprocess_exec(
                'curl', '--interface', interface, '-s', '--connect-timeout', '5',
                'http://httpbin.org/ip',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                try:
                    import json
                    response = json.loads(stdout.decode())
                    external_ip = response.get('origin', '')
                    logger.info(f"‚úÖ Test successful: interface {interface} -> external IP {external_ip}")
                    return True
                except json.JSONDecodeError:
                    logger.error("Failed to parse test response")
                    return False
            else:
                error_msg = stderr.decode()
                logger.error(f"‚ùå Test failed for interface {interface}: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error testing interface {interface}: {e}")
            return False

    async def debug_device_selection(self, request: web.Request):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            if not self.device_manager:
                logger.error("Device manager not available")
                return None

            all_devices = await self.device_manager.get_all_devices()
            logger.info(f"Total devices available: {len(all_devices)}")

            for device_id, device in all_devices.items():
                logger.info(
                    f"Device: {device_id}, type: {device.get('type')}, "
                    f"interface: {device.get('interface')}, status: {device.get('status')}"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_id = request.headers.get('X-Proxy-Device-ID')
            if device_id:
                logger.info(f"Requested specific device: {device_id}")
                device = await self.device_manager.get_device_by_id(device_id)
                if device:
                    logger.info(f"Found requested device: {device}")
                    return device
                else:
                    logger.warning(f"Requested device {device_id} not found")

            # –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            online_devices = [d for d in all_devices.values() if d.get('status') == 'online']
            logger.info(f"Online devices: {len(online_devices)}")

            if online_devices:
                selected = online_devices[0]
                logger.info(f"Selected first online device: {selected}")
                return selected
            else:
                logger.warning("No online devices found")
                return None

        except Exception as e:
            logger.error(f"Error in debug_device_selection: {e}")
            return None

    async def force_curl_via_interface(self, request: web.Request, target_url: str, interface: str) -> Optional[
        web.Response]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ curl —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            logger.info(f"üîß FORCING CURL via interface: {interface}")
            logger.info(f"Target URL: {target_url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if interface not in netifaces.interfaces():
                logger.error(f"‚ùå Interface {interface} not found")
                return None

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.error(f"‚ùå No IP on interface {interface}")
                return None

            interface_ip = addrs[netifaces.AF_INET][0]['addr']
            logger.info(f"‚úÖ Interface {interface} IP: {interface_ip}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ curl —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            curl_cmd = [
                'curl',
                '--interface', interface,
                '--silent',
                '--show-error',  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
                '--fail-with-body',  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–ª–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                '--max-time', '30',
                '--connect-timeout', '10',
                '--location',  # –°–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
                '--compressed',  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∂–∞—Ç–∏—è
                '--header', 'Accept: application/json, text/plain, */*',
                '--header', 'User-Agent: Mobile-Proxy-Interface/1.0',
                '--write-out', '\\nHTTPSTATUS:%{http_code}\\nTIME:%{time_total}\\n',
                target_url
            ]

            logger.info(f"üîß Executing curl with improved parameters:")
            logger.info(f"   Command: {' '.join(curl_cmd[:8])}...")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            process = await asyncio.create_subprocess_exec(
                *curl_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(),
                    timeout=35  # –ß—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º max-time curl
                )
            except asyncio.TimeoutError:
                logger.error(f"‚ùå Curl timeout after 35 seconds")
                process.kill()
                return None

            logger.info(f"üìä Curl exit code: {process.returncode}")

            if stderr:
                stderr_text = stderr.decode('utf-8', errors='ignore')
                logger.info(f"üìù Curl stderr: {stderr_text}")

            if process.returncode == 0:
                output = stdout.decode('utf-8', errors='ignore')
                logger.info(f"üì¶ Curl output length: {len(output)} bytes")

                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
                status_code = 200
                response_body = output
                time_total = "0"

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ write-out
                lines = output.split('\n')
                body_lines = []

                for line in lines:
                    if line.startswith('HTTPSTATUS:'):
                        try:
                            status_code = int(line.split(':')[1].strip())
                            logger.info(f"‚úÖ Parsed HTTP status: {status_code}")
                        except (ValueError, IndexError) as e:
                            logger.warning(f"Failed to parse status: {e}")
                    elif line.startswith('TIME:'):
                        try:
                            time_total = line.split(':')[1].strip()
                            logger.info(f"‚è±Ô∏è Request time: {time_total}s")
                        except (ValueError, IndexError):
                            pass
                    elif line.strip():  # –ù–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–¥—É—Ç –≤ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                        body_lines.append(line)

                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                if body_lines:
                    response_body = '\n'.join(body_lines)
                else:
                    response_body = output.split('HTTPSTATUS:')[0] if 'HTTPSTATUS:' in output else output

                logger.info(f"üéâ SUCCESS! Interface {interface} -> Status {status_code}, Body: {response_body[:100]}...")

                return web.Response(
                    body=response_body.encode('utf-8'),
                    status=status_code,
                    headers={
                        'X-Proxy-Via': f'interface-{interface}',
                        'X-Interface-IP': interface_ip,
                        'X-Request-Time': time_total,
                        'X-Method': 'curl-interface-binding',
                        'Content-Type': 'application/json' if response_body.strip().startswith('{') else 'text/plain'
                    }
                )
            else:
                error_msg = stderr.decode('utf-8', errors='ignore') if stderr else 'Unknown error'
                logger.error(f"‚ùå Curl failed with code {process.returncode}: {error_msg}")

                # –ü–æ–ø—ã—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
                if 'Network is unreachable' in error_msg:
                    logger.error("üö® Network unreachable - check interface routing")
                elif 'Could not resolve host' in error_msg:
                    logger.error("üö® DNS resolution failed - check interface DNS")
                elif 'Connection timed out' in error_msg:
                    logger.error("üö® Connection timeout - check interface connectivity")

                return None

        except Exception as e:
            logger.error(f"‚ùå Exception in force_curl_via_interface: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None

    async def test_interface_connectivity(self, interface: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            logger.info(f"üß™ Testing connectivity for interface: {interface}")

            # –ü—Ä–æ—Å—Ç–æ–π ping —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            ping_cmd = ['ping', '-I', interface, '-c', '1', '-W', '5', '8.8.8.8']

            process = await asyncio.create_subprocess_exec(
                *ping_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                logger.info(f"‚úÖ Ping test successful for {interface}")
                return True
            else:
                logger.warning(f"‚ùå Ping test failed for {interface}: {stderr.decode()}")
                return False

        except Exception as e:
            logger.error(f"Error testing interface {interface}: {e}")
            return False
