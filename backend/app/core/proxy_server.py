# backend/app/core/proxy_server.py - ENHANCED VERSION WITH DEVICE INTERFACE ROUTING

import asyncio
import aiohttp
from aiohttp import web, ClientSession, ClientTimeout, TCPConnector
import time
import socket
import netifaces
from typing import Optional, Dict, Any, List
from typing import Dict, List, Optional, Tuple
from urllib.parse import urlparse
import structlog
import subprocess
import re
import json
from datetime import datetime, timezone
import psutil
import random


from ..config import settings

logger = structlog.get_logger()


class ProxyServer:
    """HTTP –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""

    def __init__(self, device_manager, stats_collector):
        self.device_manager = device_manager
        self.stats_collector = stats_collector
        self.app = None
        self.runner = None
        self.site = None
        self.session: Optional[ClientSession] = None
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info(f"Starting enhanced proxy server on {settings.proxy_host}:{settings.proxy_port}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = web.Application()
            self.setup_routes()

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()

            self.site = web.TCPSite(
                self.runner,
                settings.proxy_host,
                settings.proxy_port
            )

            await self.site.start()
            self.running = True

            logger.info(f"‚úÖ Proxy server started on {settings.proxy_host}:{settings.proxy_port}")

        except Exception as e:
            logger.error(f"‚ùå Failed to start proxy server: {e}")
            self.running = False
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False

        if self.site:
            await self.site.stop()

        if self.runner:
            await self.runner.cleanup()

        if self.session:
            await self.session.close()

        logger.info("Proxy server stopped")

    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        # –ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.app.router.add_get('/', self.root_handler)

        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
        self.app.router.add_get('/status', self.status_handler)

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.app.router.add_route('*', '/{path:.*}', self.universal_handler)

    async def root_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏"""
        try:
            device_count = 0
            if self.device_manager:
                devices = await self.device_manager.get_all_devices()
                device_count = len(devices)

            return web.json_response({
                "service": "Mobile Proxy Server with Interface Routing",
                "status": "running",
                "version": "2.0.0",
                "available_devices": device_count,
                "features": ["Interface Routing", "IP Rotation", "Device Management"],
                "message": "Enhanced proxy server with device interface routing",
                "examples": {
                    "http": "curl -x http://192.168.1.50:8080 http://httpbin.org/ip",
                    "https": "curl -x http://192.168.1.50:8080 https://httpbin.org/ip",
                    "specific_device": "curl -H 'X-Proxy-Device-ID: android_AH3SCP4B11207250' -x http://192.168.1.50:8080 http://httpbin.org/ip"
                }
            })
        except Exception as e:
            logger.error(f"Error in root handler: {e}")
            return web.json_response({"error": str(e)}, status=500)

    async def status_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏"""
        try:
            device_count = 0
            online_devices = 0
            device_interfaces = []

            if self.device_manager:
                devices = await self.device_manager.get_all_devices()
                device_count = len(devices)
                online_devices = len([d for d in devices.values() if d.get('status') == 'online'])

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                for device_id, device in devices.items():
                    if device.get('status') == 'online':
                        interface_info = await self.get_device_interface_info(device)
                        if interface_info:
                            device_interfaces.append({
                                "device_id": device_id,
                                "device_type": device.get('type'),
                                "interface": interface_info.get('interface'),
                                "ip": interface_info.get('ip'),
                                "routing_method": interface_info.get('routing_method')
                            })

            return web.json_response({
                "proxy_status": "running",
                "total_devices": device_count,
                "online_devices": online_devices,
                "device_interfaces": device_interfaces,
                "proxy_host": settings.proxy_host,
                "proxy_port": settings.proxy_port,
                "supports": ["HTTP", "HTTPS", "Interface Routing"]
            })
        except Exception as e:
            logger.error(f"Error in status handler: {e}")
            return web.json_response({"error": str(e)}, status=500)

    async def universal_handler(self, request: web.Request) -> web.Response:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        start_time = time.time()
        client_ip = self.get_client_ip(request)

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL
            target_url = self.get_target_url(request)
            if not target_url:
                return web.Response(
                    text="Bad Request: Use as HTTP proxy. Example: curl -x http://192.168.1.50:8080 http://httpbin.org/ip",
                    status=400
                )

            logger.info(f"üì° PROXY REQUEST: {request.method} {target_url} from {client_ip}")

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            device_header = request.headers.get('X-Proxy-Device-ID')
            logger.info(f"Device header: {device_header}")

            # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
            device = await self.debug_device_selection(request)
            if not device:
                logger.error("‚ùå NO DEVICES AVAILABLE")
                return web.Response(text="No devices available", status=503)

            device_id = device.get('id', 'unknown')
            device_type = device.get('type', 'unknown')
            interface = device.get('interface', 'unknown')

            logger.info(f"‚úÖ SELECTED DEVICE: {device_id}")
            logger.info(f"   Type: {device_type}")
            logger.info(f"   Interface: {interface}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
            if device_type == 'android' and interface == 'enx566cf3eaaf4b':
                logger.info(f"üöÄ USING ANDROID INTERFACE: {interface}")

                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ curl —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
                response = await self.force_curl_via_interface(request, target_url, interface)

                if response:
                    response_time = int((time.time() - start_time) * 1000)
                    logger.info(f"‚úÖ SUCCESS via {interface}: {response.status} in {response_time}ms")

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    response.headers['X-Debug-Via-Interface'] = interface
                    response.headers['X-Debug-Device-ID'] = device_id
                    response.headers['X-Debug-Success'] = 'true'

                    return response
                else:
                    logger.error(f"‚ùå CURL FAILED via {interface}")
            else:
                logger.warning(f"‚ö†Ô∏è WRONG DEVICE TYPE OR INTERFACE: type={device_type}, interface={interface}")

            # Fallback
            logger.info("üîÑ USING FALLBACK (this will use server's main interface)")
            response = await self.forward_request_default(request, target_url, device)

            response_time = int((time.time() - start_time) * 1000)
            logger.info(f"‚úÖ Fallback completed: {response.status} in {response_time}ms")

            response.headers['X-Debug-Via-Fallback'] = 'true'
            return response

        except Exception as e:
            logger.error(f"‚ùå ERROR in universal_handler: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return web.Response(text=f"Internal Server Error: {str(e)}", status=500)

    async def get_device_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_type = device.get('type')
            device_id = device.get('id')

            if device_type == 'android':
                return await self.get_android_interface_info(device)
            elif device_type == 'usb_modem':
                return await self.get_usb_modem_interface_info(device)
            elif device_type == 'raspberry_pi':
                return await self.get_raspberry_interface_info(device)

        except Exception as e:
            logger.error(f"Error getting interface info for device {device_id}: {e}")

        return None

    async def get_android_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç–µ–ø–µ—Ä—å –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º)
            interface = device.get('interface')
            adb_id = device.get('adb_id')

            if not interface or interface == "unknown":
                logger.warning(f"No interface found for Android device {adb_id}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            if interface not in netifaces.interfaces():
                logger.warning(f"Interface {interface} not found in system for device {adb_id}")
                return None

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.warning(f"No IP address on interface {interface} for device {adb_id}")
                return None

            ip = addrs[netifaces.AF_INET][0]['addr']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å UP
            try:
                result = subprocess.run(['ip', 'link', 'show', interface],
                                        capture_output=True, text=True, timeout=5)
                if result.returncode == 0 and 'UP' in result.stdout:
                    logger.info(f"Android interface {interface} is UP for device {adb_id}")
                    return {
                        'interface': interface,
                        'ip': ip,
                        'routing_method': 'curl_interface_binding',
                        'type': 'android_usb_tethering'
                    }
                else:
                    logger.warning(f"Interface {interface} is DOWN for device {adb_id}")
                    return None
            except subprocess.TimeoutExpired:
                logger.warning(f"Timeout checking interface {interface} status")
                return None

        except Exception as e:
            logger.error(f"Error getting Android interface info for {device.get('adb_id')}: {e}")
            return None

    async def get_usb_modem_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ USB –º–æ–¥–µ–º–∞"""
        try:
            # –ü–æ–∏—Å–∫ PPP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            interfaces = netifaces.interfaces()
            for interface in interfaces:
                if interface.startswith('ppp') or interface.startswith('wwan'):
                    addrs = netifaces.ifaddresses(interface)
                    if netifaces.AF_INET in addrs:
                        return {
                            'interface': interface,
                            'ip': addrs[netifaces.AF_INET][0]['addr'],
                            'routing_method': 'curl_interface_binding',
                            'type': 'usb_modem'
                        }

        except Exception as e:
            logger.error(f"Error getting USB modem interface info: {e}")

        return None

    async def get_raspberry_interface_info(self, device: Dict[str, Any]) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Raspberry Pi"""
        try:
            interface = device.get('interface', '')
            if interface and interface in netifaces.interfaces():
                addrs = netifaces.ifaddresses(interface)
                if netifaces.AF_INET in addrs:
                    return {
                        'interface': interface,
                        'ip': addrs[netifaces.AF_INET][0]['addr'],
                        'routing_method': 'curl_interface_binding',
                        'type': 'raspberry_pi'
                    }

        except Exception as e:
            logger.error(f"Error getting Raspberry Pi interface info: {e}")

        return None

    async def forward_request_via_device_interface(
        self,
        request: web.Request,
        target_url: str,
        device: Dict[str, Any]
    ) -> web.Response:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            interface_info = await self.get_device_interface_info(device)

            if not interface_info:
                logger.warning(f"No interface info for device {device['id']}, using default routing")
                return await self.forward_request_default(request, target_url, device)

            interface = interface_info['interface']
            device_type = device.get('type', 'unknown')

            logger.info(f"Routing {request.method} request to {target_url} via {device_type} interface {interface}")

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ curl –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            response = await self.execute_request_via_curl(request, target_url, interface)

            if response:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                response.headers['X-Proxy-Device-Type'] = device_type
                response.headers['X-Proxy-Device-ID'] = device.get('id', 'unknown')
                if device_type == 'android':
                    response.headers[
                        'X-Proxy-Android-Model'] = f"{device.get('manufacturer', 'Unknown')} {device.get('model', 'Unknown')}"
                return response
            else:
                logger.warning(f"Curl request failed for interface {interface}, fallback to default routing")
                return await self.forward_request_default(request, target_url, device)

        except Exception as e:
            logger.error(f"Error forwarding request via device interface: {e}")
            return await self.forward_request_default(request, target_url, device)

    async def execute_request_via_curl(
        self,
        request: web.Request,
        target_url: str,
        interface: str
    ) -> Optional[web.Response]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ curl —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            if interface not in netifaces.interfaces():
                logger.error(f"Interface {interface} not found")
                return None

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.error(f"No IP on interface {interface}")
                return None

            interface_ip = addrs[netifaces.AF_INET][0]['addr']
            logger.info(f"Using interface {interface} with IP {interface_ip} for request to {target_url}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã curl —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            curl_cmd = [
                'curl',
                '--interface', interface,  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                '--silent',
                '--location',  # –°–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
                '--max-time', '30',
                '--connect-timeout', '10',
                '--retry', '1',
                '--write-out', 'HTTPSTATUS:%{http_code}\\nCONTENT-TYPE:%{content_type}\\n',
                '--header', f"User-Agent: {request.headers.get('User-Agent', 'Mobile-Proxy/2.0')}",
            ]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
            excluded_headers = {
                'host', 'content-length', 'connection', 'x-proxy-device-id',
                'x-proxy-operator', 'x-proxy-region', 'transfer-encoding',
                'proxy-connection', 'proxy-authorization'
            }

            for header_name, header_value in request.headers.items():
                if header_name.lower() not in excluded_headers:
                    curl_cmd.extend(['--header', f"{header_name}: {header_value}"])

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST/PUT/PATCH
            request_body = None
            if request.method in ['POST', 'PUT', 'PATCH']:
                request_body = await request.read()
                if request_body:
                    curl_cmd.extend(['--data-binary', '@-'])

            # –£–∫–∞–∑–∞–Ω–∏–µ HTTP –º–µ—Ç–æ–¥–∞
            if request.method != 'GET':
                curl_cmd.extend(['-X', request.method])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ URL
            curl_cmd.append(target_url)

            logger.info(f"Executing curl command: {' '.join(curl_cmd[:8])}... via {interface}")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ curl —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ stdin
            if request_body:
                process = await asyncio.create_subprocess_exec(
                    *curl_cmd,
                    stdin=asyncio.subprocess.PIPE,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                stdout, stderr = await process.communicate(input=request_body)
            else:
                process = await asyncio.create_subprocess_exec(
                    *curl_cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                stdout, stderr = await process.communicate()

            if process.returncode == 0:
                # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ curl
                output = stdout.decode('utf-8', errors='ignore')

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                status_code = 200
                content_type = 'text/html'

                lines = output.split('\n')
                response_body = output

                for line in lines:
                    if line.startswith('HTTPSTATUS:'):
                        try:
                            status_code = int(line.split(':')[1].strip())
                            # –£–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏–∑ body
                            response_body = response_body.replace(line + '\n', '')
                        except (ValueError, IndexError):
                            pass
                    elif line.startswith('CONTENT-TYPE:'):
                        content_type = line.split(':', 1)[1].strip()
                        response_body = response_body.replace(line + '\n', '')

                response_body_bytes = response_body.encode('utf-8')

                logger.info(
                    f"Curl request successful via {interface}: status {status_code}, size {len(response_body_bytes)} bytes")

                # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                response_headers = {
                    'X-Proxy-Via': f"interface-{interface}",
                    'X-Proxy-Method': 'curl-interface-binding',
                    'X-Proxy-Interface-IP': interface_ip
                }

                if content_type:
                    response_headers['Content-Type'] = content_type

                return web.Response(
                    body=response_body_bytes,
                    status=status_code,
                    headers=response_headers
                )
            else:
                error_msg = stderr.decode('utf-8', errors='ignore')
                logger.error(f"Curl request failed via {interface}: returncode={process.returncode}, error={error_msg}")
                return None

        except Exception as e:
            logger.error(f"Error executing curl request via {interface}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None

    async def forward_request_default(
        self,
        request: web.Request,
        target_url: str,
        device: Dict[str, Any]
    ) -> web.Response:
        """Fallback: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            async with ClientSession(
                timeout=ClientTimeout(total=30),
                connector=TCPConnector(limit=10)
            ) as session:

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers = dict(request.headers)
                headers.pop('Host', None)
                headers.pop('X-Proxy-Device-ID', None)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
                body = None
                if request.method in ['POST', 'PUT', 'PATCH']:
                    body = await request.read()

                async with session.request(
                    method=request.method,
                    url=target_url,
                    headers=headers,
                    data=body,
                    allow_redirects=False,
                    ssl=False
                ) as response:
                    response_body = await response.read()
                    response_headers = dict(response.headers)
                    response_headers.pop('Transfer-Encoding', None)
                    response_headers['X-Proxy-Via'] = 'default-routing'

                    return web.Response(
                        body=response_body,
                        status=response.status,
                        headers=response_headers
                    )

        except Exception as e:
            logger.error(f"Error in default request forwarding: {e}")
            return web.Response(text=f"Bad Gateway: {str(e)}", status=502)

    def get_client_ip(self, request: web.Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            forwarded_for = request.headers.get('X-Forwarded-For')
            if forwarded_for:
                return forwarded_for.split(',')[0].strip()

            real_ip = request.headers.get('X-Real-IP')
            if real_ip:
                return real_ip

            transport = request.transport
            if transport:
                peername = transport.get_extra_info('peername')
                if peername:
                    return peername[0]

            return 'unknown'
        except Exception:
            return 'unknown'

    def get_target_url(self, request: web.Request) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –î–ª—è –ø—Ä—è–º—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            if request.path_qs.startswith('http://') or request.path_qs.startswith('https://'):
                return request.path_qs

            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Host –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            host = request.headers.get('Host')
            if host:
                # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–º–æ–º—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É
                proxy_hosts = [
                    '192.168.1.50:8080',
                    '127.0.0.1:8080',
                    'localhost:8080',
                    f'{settings.proxy_host}:{settings.proxy_port}'
                ]

                if host not in proxy_hosts:
                    scheme = 'https' if request.secure else 'http'
                    return f"{scheme}://{host}{request.path_qs}"

            return None

        except Exception as e:
            logger.error(f"Error getting target URL: {e}")
            return None

    async def make_request_via_interface(self, session: aiohttp.ClientSession,
                                         method: str, url: str, interface: str,
                                         headers: dict = None, data: bytes = None) -> aiohttp.ClientResponse:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            import netifaces

            if interface not in netifaces.interfaces():
                raise Exception(f"Interface {interface} not found")

            addresses = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addresses:
                raise Exception(f"No IPv4 address on interface {interface}")

            local_ip = addresses[netifaces.AF_INET][0]['addr']

            # –°–æ–∑–¥–∞–µ–º connector —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É IP
            connector = aiohttp.TCPConnector(
                local_addr=(local_ip, 0),  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ IP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                limit=100,
                limit_per_host=10,
                ttl_dns_cache=300,
                use_dns_cache=True,
            )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —ç—Ç–∏–º connector
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as bound_session:

                logger.debug(f"Making request via interface {interface} (IP: {local_ip})")

                async with bound_session.request(
                    method=method,
                    url=url,
                    headers=headers,
                    data=data,
                    allow_redirects=True
                ) as response:
                    return response

        except Exception as e:
            logger.error(f"Error making request via interface {interface}: {e}")
            raise

    async def select_device(self, request: web.Request) -> Optional[Dict[str, Any]]:
        """–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.device_manager:
                logger.warning("Device manager not available")
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_id = request.headers.get('X-Proxy-Device-ID')
            if device_id:
                device = await self.device_manager.get_device_by_id(device_id)
                if device and device.get('status') == 'online':
                    logger.info(f"Using specific device requested: {device_id}")
                    return device
                else:
                    logger.warning(f"Requested device {device_id} not available")

            # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device = await self.device_manager.get_random_device()
            if device:
                logger.info(f"Selected random device: {device.get('id')} ({device.get('type')})")
            else:
                logger.warning("No online devices available")

            return device

        except Exception as e:
            logger.error(f"Error selecting device: {e}")
            return None

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return self.running

    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.device_manager:
                device_summary = await self.device_manager.get_summary()
            else:
                device_summary = {"total_devices": 0, "online_devices": 0}

            return {
                "devices": device_summary,
                "server_info": {
                    "running": self.running,
                    "host": settings.proxy_host,
                    "port": settings.proxy_port,
                    "routing_method": "device_interface_binding",
                    "supports_interface_routing": True
                }
            }

        except Exception as e:
            logger.error(f"Error getting proxy stats: {e}")
            return {"error": str(e)}

    async def handle_request(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""

        try:
            # –í—ã–±–∏—Ä–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            selected_modem = await self.select_modem()
            if not selected_modem:
                return web.Response(text="No modems available", status=503)

            modem_id = selected_modem['id']

            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            route = await self.get_route_for_modem(modem_id)
            if not route:
                logger.warning(f"No route available for modem {modem_id}")
                return web.Response(text="No route available", status=503)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            target_url = str(request.url).replace(str(request.url.with_path('/').with_query('')), '')
            if not target_url.startswith('http'):
                target_url = f"http://{target_url}"

            # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Å–∫–ª—é—á–∞—è hop-by-hop –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {}
            for name, value in request.headers.items():
                if name.lower() not in ['connection', 'upgrade', 'proxy-authenticate', 'proxy-authorization', 'te',
                                        'trailers', 'transfer-encoding']:
                    headers[name] = value

            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()

            start_time = time.time()

            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
                async with aiohttp.ClientSession() as session:

                    if route.get('method') == 'interface_binding':
                        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        interface = route.get('interface')
                        logger.debug(f"Making request via interface {interface}")

                        response = await self.make_request_via_interface(
                            session, request.method, target_url, interface, headers, body
                        )
                    else:
                        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        async with session.request(
                            method=request.method,
                            url=target_url,
                            headers=headers,
                            data=body
                        ) as response:
                            pass

                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                    response_body = await response.read()
                    response_headers = {}

                    for name, value in response.headers.items():
                        if name.lower() not in ['connection', 'transfer-encoding']:
                            response_headers[name] = value

                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    elapsed = time.time() - start_time
                    logger.info(
                        f"Request completed via {modem_id}",
                        method=request.method,
                        url=target_url,
                        status=response.status,
                        elapsed=f"{elapsed:.2f}s",
                        interface=route.get('interface', 'unknown')
                    )

                    return web.Response(
                        body=response_body,
                        status=response.status,
                        headers=response_headers
                    )

            except Exception as e:
                elapsed = time.time() - start_time
                logger.error(
                    f"Request failed via {modem_id}",
                    method=request.method,
                    url=target_url,
                    error=str(e),
                    elapsed=f"{elapsed:.2f}s"
                )
                return web.Response(text=f"Request failed: {str(e)}", status=502)

        except Exception as e:
            logger.error(f"Error handling request: {e}")
            return web.Response(text="Internal server error", status=500)

    async def test_interface_routing(self, interface: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            logger.info(f"üß™ Testing interface routing for {interface}")

            if interface not in netifaces.interfaces():
                logger.error(f"Interface {interface} not found")
                return False

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                logger.error(f"No IP on interface {interface}")
                return False

            interface_ip = addrs[netifaces.AF_INET][0]['addr']
            logger.info(f"Interface {interface} has IP: {interface_ip}")

            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            process = await asyncio.create_subprocess_exec(
                'curl', '--interface', interface, '-s', '--connect-timeout', '5',
                'http://httpbin.org/ip',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                try:
                    import json
                    response = json.loads(stdout.decode())
                    external_ip = response.get('origin', '')
                    logger.info(f"‚úÖ Test successful: interface {interface} -> external IP {external_ip}")
                    return True
                except json.JSONDecodeError:
                    logger.error("Failed to parse test response")
                    return False
            else:
                error_msg = stderr.decode()
                logger.error(f"‚ùå Test failed for interface {interface}: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error testing interface {interface}: {e}")
            return False

    async def debug_device_selection(self, request: web.Request):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            if not self.device_manager:
                logger.error("Device manager not available")
                return None

            all_devices = await self.device_manager.get_all_devices()
            logger.info(f"Total devices available: {len(all_devices)}")

            for device_id, device in all_devices.items():
                logger.info(
                    f"Device: {device_id}, type: {device.get('type')}, "
                    f"interface: {device.get('interface')}, status: {device.get('status')}"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_id = request.headers.get('X-Proxy-Device-ID')
            if device_id:
                logger.info(f"Requested specific device: {device_id}")
                device = await self.device_manager.get_device_by_id(device_id)
                if device:
                    logger.info(f"Found requested device: {device}")
                    return device
                else:
                    logger.warning(f"Requested device {device_id} not found")

            # –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            online_devices = [d for d in all_devices.values() if d.get('status') == 'online']
            logger.info(f"Online devices: {len(online_devices)}")

            if online_devices:
                selected = online_devices[0]
                logger.info(f"Selected first online device: {selected}")
                return selected
            else:
                logger.warning("No online devices found")
                return None

        except Exception as e:
            logger.error(f"Error in debug_device_selection: {e}")
            return None

    async def force_curl_via_interface(self, request: web.Request, target_url: str, interface: str) -> Optional[
        web.Response]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ curl —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            logger.info(f"üîß FORCING CURL via interface: {interface}")

            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ curl
            curl_cmd = [
                'curl',
                '--interface', interface,
                '--silent',
                '--max-time', '30',
                '--write-out', 'HTTPSTATUS:%{http_code}',
                target_url
            ]

            logger.info(f"Executing: {' '.join(curl_cmd)}")

            process = await asyncio.create_subprocess_exec(
                *curl_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                output = stdout.decode('utf-8', errors='ignore')

                # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
                status_code = 200
                if 'HTTPSTATUS:' in output:
                    try:
                        status_pos = output.rfind('HTTPSTATUS:')
                        status_code = int(output[status_pos + 11:].strip())
                        response_body = output[:status_pos]
                    except (ValueError, IndexError):
                        response_body = output
                else:
                    response_body = output

                logger.info(f"‚úÖ CURL SUCCESS: status {status_code}, body length {len(response_body)}")

                return web.Response(
                    body=response_body.encode('utf-8'),
                    status=status_code,
                    headers={
                        'X-Forced-Via': interface,
                        'Content-Type': 'application/json'
                    }
                )
            else:
                error_msg = stderr.decode('utf-8', errors='ignore')
                logger.error(f"‚ùå CURL ERROR: {error_msg}")
                return None

        except Exception as e:
            logger.error(f"‚ùå Exception in force_curl_via_interface: {e}")
            return None
