# backend/app/core/modem_manager.py - –ú–ï–ù–ï–î–ñ–ï–† –î–õ–Ø HUAWEI E3372h –ú–û–î–ï–ú–û–í

import asyncio
import subprocess
import time
import re
import json
import netifaces
import aiohttp
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timezone
import structlog
import random
import uuid
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func
from ..models.database import AsyncSessionLocal
from ..models.base import ProxyDevice

logger = structlog.get_logger()


class ModemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å USB –º–æ–¥–µ–º–∞–º–∏ Huawei E3372h"""

    def __init__(self):
        self.modems: Dict[str, dict] = {}
        self.running = False
        self.huawei_oui = "0c:5b:8f"  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π OUI Huawei Technologies Co.,Ltd.

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–º–æ–≤ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        self.running = True

        logger.info("Starting optimized modem manager...")
        start_time = time.time()

        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥–µ–º–æ–≤
        await self.discover_all_devices()

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        await self.quick_health_check()

        total_time = time.time() - start_time
        logger.info(f"‚úÖ Modem manager started in {total_time:.2f}s")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–º–æ–≤"""
        self.running = False
        logger.info("Modem manager stopped")

    async def discover_all_devices(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö Huawei E3372h –º–æ–¥–µ–º–æ–≤ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
            self.modems.clear()

            logger.info("Starting optimized Huawei E3372h modem discovery...")
            start_time = time.time()

            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ USB –º–æ–¥–µ–º–æ–≤ Huawei (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
            huawei_modems = await self.discover_huawei_modems()

            discovery_time = time.time() - start_time

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–º—ã
            for modem_id, modem_info in huawei_modems.items():
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                self.modems[modem_id] = modem_info

                logger.info(
                    "Huawei modem discovered",
                    modem_id=modem_id,
                    type=modem_info['type'],
                    interface=modem_info.get('interface', 'N/A'),
                    interface_ip=modem_info.get('interface_ip', 'N/A'),
                    web_interface=modem_info.get('web_interface', 'N/A'),
                    subnet=modem_info.get('subnet_number', 'N/A'),
                    external_ip=modem_info.get('external_ip', 'N/A'),
                    status=modem_info.get('status', 'unknown')
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.save_device_to_db(modem_id, modem_info)

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            summary = await self.get_discovery_summary()

            logger.info(f"‚úÖ Huawei modems discovery completed in {discovery_time:.2f}s")
            logger.info(f"‚úÖ Total modems discovered: {len(self.modems)}")
            logger.info(f"‚úÖ Online modems: {len([m for m in self.modems.values() if m.get('status') == 'online'])}")
            logger.info(f"‚úÖ Modems saved to database")

            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –º–æ–¥–µ–º–µ
            for modem_id, modem_info in self.modems.items():
                logger.info(
                    f"üìã {modem_id}: {modem_info.get('interface_ip')} -> {modem_info.get('web_interface')} "
                    f"({modem_info.get('status')}, External: {modem_info.get('external_ip', 'N/A')})"
                )

        except Exception as e:
            logger.error("Error discovering Huawei modems", error=str(e))

    async def discover_huawei_modems(self) -> Dict[str, dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Huawei E3372h –º–æ–¥–µ–º–æ–≤ –ø–æ MAC-–∞–¥—Ä–µ—Å—É - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        modems = {}

        try:
            logger.info("Scanning for Huawei E3372h modems by MAC address (optimized)...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            all_interfaces = netifaces.interfaces()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å OUI Huawei
            huawei_interfaces = []
            for interface in all_interfaces:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                if interface.startswith(('lo', 'docker', 'br-', 'veth', 'enp5s0')):
                    continue

                # –ü–æ–ª—É—á–∞–µ–º MAC-–∞–¥—Ä–µ—Å
                mac_addr = await self.get_interface_mac(interface)
                if mac_addr and mac_addr.lower().startswith(self.huawei_oui.lower()):
                    huawei_interfaces.append((interface, mac_addr))
                    logger.info(f"Found Huawei interface: {interface} with MAC: {mac_addr}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            for interface, mac_addr in huawei_interfaces:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    interface_ip = await self.get_interface_ip(interface)
                    if not interface_ip:
                        logger.warning(f"No IP address for Huawei interface {interface}")
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–¥—Å–µ—Ç–∏ –∏–∑ IP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    # –ù–∞–ø—Ä–∏–º–µ—Ä: 192.168.108.100 -> 108
                    subnet_number = await self.extract_subnet_number(interface_ip)
                    if subnet_number is None:
                        logger.warning(f"Cannot extract subnet number from IP {interface_ip}")
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ –≤–∞—à–µ–π —Å—Ö–µ–º–µ
                    # 192.168.108.100 -> 192.168.108.1
                    web_interface = f"192.168.{subnet_number}.1"

                    logger.info(f"Processing Huawei modem: {interface} (IP: {interface_ip}) -> Web: {web_interface}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    web_accessible = await self.check_web_interface_accessibility(web_interface)

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–º–µ
                    modem_details = await self.get_modem_details(web_interface, interface_ip)

                    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    external_ip = await self.get_external_ip_via_interface_name(interface)

                    modem_id = f"huawei_{interface}"
                    modem_info = {
                        'id': modem_id,
                        'type': 'usb_modem',
                        'model': 'E3372h',
                        'manufacturer': 'Huawei',
                        'interface': interface,
                        'mac_address': mac_addr,
                        'interface_ip': interface_ip,
                        'web_interface': web_interface,
                        'subnet_number': subnet_number,
                        'device_info': f"Huawei E3372h on {interface} (subnet {subnet_number})",
                        'status': 'online' if web_accessible else 'offline',
                        'web_accessible': web_accessible,
                        'external_ip': external_ip,
                        'routing_capable': True,
                        'rotation_methods': ['web_interface', 'interface_restart', 'dhcp_renew'],
                        'last_seen': datetime.now().isoformat()
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞
                    if modem_details:
                        modem_info.update(modem_details)

                    modems[modem_id] = modem_info

                    logger.info(
                        f"‚úÖ Huawei E3372h discovered: {interface} (IP: {interface_ip}) -> "
                        f"Web: {web_interface} ({'accessible' if web_accessible else 'not accessible'}), "
                        f"External IP: {external_ip or 'N/A'}"
                    )

                except Exception as e:
                    logger.error(f"Error processing Huawei interface {interface}: {e}")
                    continue

        except Exception as e:
            logger.error("Error discovering Huawei modems", error=str(e))

        return modems

    async def quick_health_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –º–æ–¥–µ–º–æ–≤"""
        try:
            logger.info("Starting quick health check for all modems...")

            health_results = {}

            for modem_id, modem_info in self.modems.items():
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    web_interface = modem_info.get('web_interface')
                    web_accessible = False
                    if web_interface:
                        web_accessible = await self.check_web_interface_accessibility(web_interface)

                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    interface = modem_info.get('interface')
                    interface_up = False
                    if interface:
                        interface_up = interface in netifaces.interfaces()

                    health_results[modem_id] = {
                        'web_accessible': web_accessible,
                        'interface_up': interface_up,
                        'overall_health': web_accessible and interface_up
                    }

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫—ç—à–µ
                    new_status = 'online' if (web_accessible and interface_up) else 'offline'
                    if modem_info.get('status') != new_status:
                        modem_info['status'] = new_status
                        await self.update_device_status(modem_id, new_status)

                except Exception as e:
                    logger.error(f"Error checking health for {modem_id}: {e}")
                    health_results[modem_id] = {
                        'web_accessible': False,
                        'interface_up': False,
                        'overall_health': False,
                        'error': str(e)
                    }

            # –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            total_modems = len(health_results)
            healthy_modems = len([r for r in health_results.values() if r.get('overall_health')])

            logger.info(f"‚úÖ Health check completed: {healthy_modems}/{total_modems} modems healthy")

            return health_results

        except Exception as e:
            logger.error(f"Error during health check: {e}")
            return {}

    async def get_interface_mac(self, interface: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ MAC-–∞–¥—Ä–µ—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ /sys/class/net
            try:
                with open(f'/sys/class/net/{interface}/address', 'r') as f:
                    mac_addr = f.read().strip()
                    if mac_addr and mac_addr != '00:00:00:00:00:00':
                        return mac_addr
            except (FileNotFoundError, IOError):
                pass

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º netifaces
            try:
                interface_info = netifaces.ifaddresses(interface)
                if netifaces.AF_LINK in interface_info:
                    link_info = interface_info[netifaces.AF_LINK][0]
                    mac_addr = link_info.get('addr')
                    if mac_addr and mac_addr != '00:00:00:00:00:00':
                        return mac_addr
            except Exception:
                pass

            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ ip command
            try:
                result = await asyncio.create_subprocess_exec(
                    'ip', 'link', 'show', interface,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                stdout, _ = await result.communicate()

                if result.returncode == 0:
                    output = stdout.decode()
                    mac_match = re.search(r'link/ether ([0-9a-f:]{17})', output)
                    if mac_match:
                        return mac_match.group(1)
            except Exception:
                pass

        except Exception as e:
            logger.debug(f"Error getting MAC for interface {interface}: {e}")

        return None

    async def get_interface_ip(self, interface: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            if interface not in netifaces.interfaces():
                return None

            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET not in addrs:
                return None

            ip_info = addrs[netifaces.AF_INET][0]
            return ip_info['addr']

        except Exception as e:
            logger.debug(f"Error getting IP for interface {interface}: {e}")
            return None

    async def extract_subnet_number(self, ip_address: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥—Å–µ—Ç–∏ –∏–∑ IP-–∞–¥—Ä–µ—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç 192.168.XXX.100
            parts = ip_address.split('.')
            if len(parts) == 4 and parts[0] == '192' and parts[1] == '168':
                subnet_num = int(parts[2])
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à—É —Å—Ö–µ–º—É –∞–¥—Ä–µ—Å–∞—Ü–∏–∏
                if parts[3] == '100':  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å IP xxx.xxx.xxx.100
                    return subnet_num
                else:
                    logger.warning(f"Unexpected interface IP format: {ip_address} (expected xxx.xxx.xxx.100)")
                    return subnet_num  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–∞–≤–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        except Exception as e:
            logger.debug(f"Error extracting subnet number from {ip_address}: {e}")

        return None

    async def check_web_interface_accessibility(self, web_interface: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–¥–µ–º–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            url = f"http://{web_interface}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            timeout = aiohttp.ClientTimeout(total=3)

            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    accessible = response.status == 200
                    logger.debug(f"Web interface {web_interface} accessibility: {accessible}")
                    return accessible
        except Exception as e:
            logger.debug(f"Web interface {web_interface} not accessible: {e}")
            return False

    async def get_modem_details(self, web_interface: str, interface_ip: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–º–µ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        details = {}

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            interface_name = await self.get_interface_name_by_ip(interface_ip)
            if interface_name:
                external_ip = await self.get_external_ip_via_interface_name(interface_name)
                if external_ip:
                    details['external_ip'] = external_ip

            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è E3372h
            details.update({
                'signal_strength': 'N/A',
                'operator': 'Unknown',
                'technology': '4G LTE',
                'connection_status': 'Connected' if details.get('external_ip') else 'Disconnected',
                'web_interface_url': f"http://{web_interface}"
            })

        except Exception as e:
            logger.debug(f"Error getting modem details for {web_interface}: {e}")

        return details if details else None

    async def get_interface_name_by_ip(self, target_ip: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ IP –∞–¥—Ä–µ—Å—É"""
        try:
            for interface in netifaces.interfaces():
                ip = await self.get_interface_ip(interface)
                if ip == target_ip:
                    return interface
            return None
        except Exception as e:
            logger.debug(f"Error getting interface name for IP {target_ip}: {e}")
            return None

    async def get_external_ip_via_interface(self, interface_ip: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ–º–∞"""
        try:
            # –ù–∞–π–¥–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ IP
            interface_name = None
            for interface in netifaces.interfaces():
                ip = await self.get_interface_ip(interface)
                if ip == interface_ip:
                    interface_name = interface
                    break

            if not interface_name:
                return None

            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ curl —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            result = await asyncio.create_subprocess_exec(
                'curl', '--interface', interface_name, '-s', '--connect-timeout', '10',
                'https://httpbin.org/ip',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await result.communicate()

            if result.returncode == 0:
                try:
                    import json
                    response = json.loads(stdout.decode())
                    return response.get('origin', '').split(',')[0].strip()
                except json.JSONDecodeError:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ IP –≤ —Ç–µ–∫—Å—Ç–µ
                    ip_match = re.search(r'(\d+\.\d+\.\d+\.\d+)', stdout.decode())
                    if ip_match:
                        return ip_match.group(1)

        except Exception as e:
            logger.debug(f"Error getting external IP via interface {interface_ip}: {e}")

        return None

    async def get_modem_by_subnet(self, subnet_number: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–º–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–¥—Å–µ—Ç–∏"""
        for modem_id, modem_info in self.modems.items():
            if modem_info.get('subnet_number') == subnet_number:
                return modem_info
        return None

    async def validate_modem_configuration(self, modem_id: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        if not modem:
            return {"valid": False, "error": "Modem not found"}

        try:
            interface_ip = modem.get('interface_ip')
            web_interface = modem.get('web_interface')
            subnet_number = modem.get('subnet_number')

            validation_result = {
                "valid": True,
                "modem_id": modem_id,
                "interface_ip": interface_ip,
                "web_interface": web_interface,
                "subnet_number": subnet_number,
                "checks": {}
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –∞–¥—Ä–µ—Å–∞—Ü–∏–∏
            if interface_ip and interface_ip.endswith('.100'):
                validation_result["checks"]["ip_scheme"] = "‚úÖ Interface IP follows .100 scheme"
            else:
                validation_result["checks"]["ip_scheme"] = "‚ö†Ô∏è Interface IP doesn't follow .100 scheme"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if web_interface and web_interface.endswith('.1'):
                validation_result["checks"]["web_scheme"] = "‚úÖ Web interface follows .1 scheme"
            else:
                validation_result["checks"]["web_scheme"] = "‚ö†Ô∏è Web interface doesn't follow .1 scheme"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            web_accessible = await self.check_web_interface_accessibility(web_interface)
            validation_result["checks"][
                "web_accessible"] = f"{'‚úÖ' if web_accessible else '‚ùå'} Web interface {'accessible' if web_accessible else 'not accessible'}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ IP
            external_ip = await self.get_device_external_ip(modem_id)
            validation_result["checks"][
                "external_ip"] = f"{'‚úÖ' if external_ip else '‚ùå'} External IP: {external_ip or 'not available'}"

            return validation_result

        except Exception as e:
            return {"valid": False, "error": str(e)}

    async def get_web_interface_by_device_ip(self, device_ip: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            subnet_number = await self.extract_subnet_number(device_ip)
            if subnet_number is not None:
                return f"192.168.{subnet_number}.1"
        except Exception as e:
            logger.debug(f"Error getting web interface for device IP {device_ip}: {e}")
        return None

    async def save_device_to_db(self, modem_id: str, modem_info: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–º–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–µ–º –≤ –ë–î
                stmt = select(ProxyDevice).where(ProxyDevice.name == modem_id)
                result = await db.execute(stmt)
                existing_device = result.scalar_one_or_none()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                device_type = modem_info.get('type', 'usb_modem')

                # IP –∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                ip_address = modem_info.get('interface_ip', '0.0.0.0')

                # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
                external_ip = modem_info.get('external_ip')

                if existing_device:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥–µ–º
                    stmt = update(ProxyDevice).where(
                        ProxyDevice.name == modem_id
                    ).values(
                        device_type=device_type,
                        ip_address=ip_address,
                        status=modem_info.get('status', 'offline'),
                        current_external_ip=external_ip,
                        operator=modem_info.get('operator', 'Unknown'),
                        last_heartbeat=datetime.now()  # –£–±–∏—Ä–∞–µ–º timezone.utc
                    )
                    await db.execute(stmt)
                    logger.info(f"Updated Huawei modem {modem_id} in database")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–æ–¥–µ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ—Ä—Ç–æ–º
                    unique_port = await self.get_next_available_port(db)

                    new_device = ProxyDevice(
                        name=modem_id,
                        device_type=device_type,
                        ip_address=ip_address,
                        port=unique_port,
                        status=modem_info.get('status', 'offline'),
                        current_external_ip=external_ip,
                        operator=modem_info.get('operator', 'Unknown'),
                        region=modem_info.get('region', 'Unknown'),
                        rotation_interval=600
                    )
                    db.add(new_device)
                    logger.info(f"Created new Huawei modem {modem_id} in database with port {unique_port}")

                await db.commit()

        except Exception as e:
            logger.error(
                "Error saving Huawei modem to database",
                modem_id=modem_id,
                error=str(e)
            )

    async def get_discovery_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ–¥–µ–º–æ–≤"""
        try:
            total_interfaces = len(netifaces.interfaces())
            huawei_interfaces = len(
                [i for i in netifaces.interfaces() if not i.startswith(('lo', 'docker', 'br-', 'veth', 'enp5s0'))])
            discovered_modems = len(self.modems)
            online_modems = len([m for m in self.modems.values() if m.get('status') == 'online'])

            return {
                "discovery_time": datetime.now().isoformat(),
                "total_interfaces": total_interfaces,
                "potential_huawei_interfaces": huawei_interfaces,
                "discovered_modems": discovered_modems,
                "online_modems": online_modems,
                "modems": list(self.modems.keys()),
                "addressing_scheme": "192.168.XXX.100 (interface) -> 192.168.XXX.1 (web)"
            }

        except Exception as e:
            logger.error(f"Error getting discovery summary: {e}")
            return {"error": str(e)}

    async def get_next_available_port(self, db: AsyncSession, start_port: int = 9000, max_port: int = 65535) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä—Ç
            stmt = select(func.max(ProxyDevice.port)).where(
                ProxyDevice.port.between(start_port, max_port)
            )
            result = await db.execute(stmt)
            max_used_port = result.scalar()

            if max_used_port is None:
                return start_port

            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å max_used_port + 1
            candidate_port = max(max_used_port + 1, start_port)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
            for port in range(candidate_port, max_port + 1):
                if not await self.is_port_used(db, port):
                    logger.info(f"Selected next available port: {port}")
                    return port

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –∏—â–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            for port in range(start_port, max_used_port):
                if not await self.is_port_used(db, port):
                    logger.info(f"Found gap in port range, using: {port}")
                    return port

            raise RuntimeError(f"No available ports in range {start_port}-{max_port}")

        except Exception as e:
            logger.error(f"Error finding available port: {e}")
            import random
            fallback_port = random.randint(start_port, max_port)
            logger.warning(f"Using fallback random port: {fallback_port}")
            return fallback_port

    async def is_port_used(self, db: AsyncSession, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        try:
            stmt = select(ProxyDevice.id).where(ProxyDevice.port == port)
            result = await db.execute(stmt)
            return result.scalar_one_or_none() is not None
        except Exception as e:
            logger.error(f"Error checking port usage: {e}")
            return True

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–º–∞—Ö (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ DeviceManager)
    async def get_all_devices(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–º–æ–≤"""
        return self.modems.copy()

    async def get_device_by_id(self, modem_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–º–∞ –ø–æ ID"""
        return self.modems.get(modem_id)

    async def get_available_devices(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–æ–Ω–ª–∞–π–Ω) –º–æ–¥–µ–º–æ–≤"""
        return [modem for modem in self.modems.values() if modem.get('status') == 'online']

    async def get_random_device(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–Ω–ª–∞–π–Ω –º–æ–¥–µ–º–∞"""
        online_modems = [
            modem for modem in self.modems.values()
            if modem.get('status') == 'online'
        ]

        if not online_modems:
            return None

        return random.choice(online_modems)

    async def is_device_online(self, modem_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        return modem is not None and modem.get('status') == 'online'

    async def get_device_external_ip(self, modem_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        if not modem:
            return None

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            interface_ip = modem.get('interface_ip')
            if interface_ip:
                external_ip = await self.get_external_ip_via_interface(interface_ip)
                if external_ip:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    modem['external_ip'] = external_ip
                    logger.debug(f"Updated external IP for {modem_id}: {external_ip}")
                    return external_ip

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–ø—Ä—è–º—É—é
            interface_name = modem.get('interface')
            if interface_name:
                external_ip = await self.get_external_ip_via_interface_name(interface_name)
                if external_ip:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    modem['external_ip'] = external_ip
                    logger.debug(f"Updated external IP for {modem_id} via interface: {external_ip}")
                    return external_ip

            logger.warning(f"Could not get external IP for modem {modem_id}")
            return None

        except Exception as e:
            logger.error(f"Error getting external IP for modem {modem_id}: {e}")
            return None

    async def get_external_ip_via_interface_name(self, interface_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP —á–µ—Ä–µ–∑ –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            result = await asyncio.create_subprocess_exec(
                'curl', '--interface', interface_name, '-s', '--connect-timeout', '5', '--max-time', '10',
                'https://httpbin.org/ip',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await result.communicate()

            if result.returncode == 0:
                try:
                    import json
                    response = json.loads(stdout.decode())
                    external_ip = response.get('origin', '').split(',')[0].strip()
                    if external_ip:
                        logger.debug(f"Got external IP via interface {interface_name}: {external_ip}")
                        return external_ip
                except json.JSONDecodeError:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ IP –≤ —Ç–µ–∫—Å—Ç–µ
                    ip_match = re.search(r'(\d+\.\d+\.\d+\.\d+)', stdout.decode())
                    if ip_match:
                        external_ip = ip_match.group(1)
                        logger.debug(f"Got external IP via interface {interface_name}: {external_ip}")
                        return external_ip

            logger.debug(f"Could not get external IP via interface {interface_name}: {stderr.decode()}")
            return None

        except Exception as e:
            logger.debug(f"Error getting external IP via interface {interface_name}: {e}")
            return None

    async def update_device_status(self, modem_id: str, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–º–∞ –≤ –ø–∞–º—è—Ç–∏ –∏ –ë–î"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            if modem_id in self.modems:
                self.modems[modem_id]['status'] = status
                self.modems[modem_id]['last_seen'] = datetime.now().isoformat()  # –£–±–∏—Ä–∞–µ–º timezone.utc

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            async with AsyncSessionLocal() as db:
                stmt = update(ProxyDevice).where(
                    ProxyDevice.name == modem_id
                ).values(
                    status=status,
                    last_heartbeat=datetime.now()  # –£–±–∏—Ä–∞–µ–º timezone.utc
                )
                await db.execute(stmt)
                await db.commit()

        except Exception as e:
            logger.error(f"Error updating modem status: {e}")

    async def get_devices_from_db(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–º–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                stmt = select(ProxyDevice).where(ProxyDevice.device_type == 'usb_modem')
                result = await db.execute(stmt)
                devices = result.scalars().all()

                devices_list = []
                for device in devices:
                    device_data = {
                        "id": str(device.id),
                        "name": device.name,
                        "device_type": device.device_type,
                        "ip_address": device.ip_address,
                        "port": device.port,
                        "status": device.status,
                        "current_external_ip": device.current_external_ip,
                        "operator": device.operator,
                        "region": device.region,
                        "last_heartbeat": device.last_heartbeat,
                        "rotation_interval": device.rotation_interval,
                        "proxy_enabled": device.proxy_enabled or False,
                        "dedicated_port": device.dedicated_port,
                        "proxy_username": device.proxy_username,
                        "proxy_password": device.proxy_password
                    }
                    devices_list.append(device_data)

                return devices_list

        except Exception as e:
            logger.error(f"Error getting modems from database: {e}")
            return []

    async def sync_devices_with_db(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–º–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("Syncing discovered modems with database...")

            for modem_id, modem_info in self.modems.items():
                await self.save_device_to_db(modem_id, modem_info)

            logger.info("‚úÖ Modem synchronization completed")

        except Exception as e:
            logger.error(f"Error syncing modems with database: {e}")

    async def force_sync_to_db(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–º–æ–≤ —Å –ë–î"""
        logger.info("üîÑ Starting forced modem synchronization to database...")
        await self.sync_devices_with_db()
        return len(self.modems)

    async def get_summary(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–º–∞—Ö"""
        total = len(self.modems)
        online = len([d for d in self.modems.values() if d.get('status') == 'online'])
        routing_capable = len([d for d in self.modems.values() if d.get('routing_capable', False)])

        by_type = {}
        for modem in self.modems.values():
            device_type = modem.get('type', 'unknown')
            by_type[device_type] = by_type.get(device_type, 0) + 1

        return {
            'total_devices': total,
            'online_devices': online,
            'offline_devices': total - online,
            'routing_capable_devices': routing_capable,
            'devices_by_type': by_type,
            'last_discovery': datetime.now().isoformat()
        }

    async def get_device_proxy_route(self, modem_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–º"""
        all_modems = await self.get_all_devices()
        modem = all_modems.get(modem_id)

        if not modem:
            return None

        interface = modem.get('interface')
        if interface:
            return {
                'type': 'usb_modem',
                'interface': interface,
                'method': 'interface_binding',
                'web_interface': modem.get('web_interface')
            }

        return None

    async def get_device_by_operator(self, operator: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–º–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        for modem in self.modems.values():
            if modem.get('operator', '').lower() == operator.lower() and modem.get('status') == 'online':
                return modem
        return None

    async def get_device_by_region(self, region: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–º–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
        for modem in self.modems.values():
            if modem.get('region', '').lower() == region.lower() and modem.get('status') == 'online':
                return modem
        return None

    async def test_modem_connectivity(self, modem_id: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        if not modem:
            return {"error": "Modem not found"}

        try:
            test_results = {
                "modem_id": modem_id,
                "timestamp": datetime.now().isoformat(),
                "tests": {}
            }

            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            web_interface = modem.get('web_interface')
            if web_interface:
                web_test = await self.check_web_interface_accessibility(web_interface)
                test_results["tests"]["web_interface"] = {
                    "url": f"http://{web_interface}",
                    "accessible": web_test
                }

            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ IP
            external_ip = await self.get_device_external_ip(modem_id)
            test_results["tests"]["external_ip"] = {
                "ip": external_ip,
                "available": external_ip is not None
            }

            # –¢–µ—Å—Ç 3: Ping test —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            interface = modem.get('interface')
            if interface:
                ping_test = await self.ping_via_interface(interface)
                test_results["tests"]["ping"] = ping_test

            # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            test_results["overall_success"] = all(
                test.get("accessible", test.get("available", test.get("success", False)))
                for test in test_results["tests"].values()
            )

            return test_results

        except Exception as e:
            logger.error(f"Error testing modem connectivity: {e}")
            return {"error": str(e)}

    async def ping_via_interface(self, interface: str) -> Dict[str, Any]:
        """Ping —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            result = await asyncio.create_subprocess_exec(
                'ping', '-I', interface, '-c', '3', '-W', '5', '8.8.8.8',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await result.communicate()

            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ping
                output = stdout.decode()
                loss_match = re.search(r'(\d+)% packet loss', output)
                time_match = re.search(r'time=(\d+\.\d+)ms', output)

                return {
                    "success": True,
                    "packet_loss": int(loss_match.group(1)) if loss_match else 0,
                    "avg_time_ms": float(time_match.group(1)) if time_match else 0,
                    "interface": interface
                }
            else:
                return {
                    "success": False,
                    "error": stderr.decode().strip(),
                    "interface": interface
                }

        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "interface": interface
            }

    async def get_modem_web_info(self, modem_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–º–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        modem = self.modems.get(modem_id)
        if not modem:
            return None

        web_interface = modem.get('web_interface')
        if not web_interface:
            return None

        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            info = {
                "web_interface": web_interface,
                "model": modem.get('model', 'E3372h'),
                "manufacturer": modem.get('manufacturer', 'Huawei'),
                "mac_address": modem.get('mac_address'),
                "interface": modem.get('interface'),
                "subnet_number": modem.get('subnet_number'),
                "accessible": await self.check_web_interface_accessibility(web_interface)
            }

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ API –º–æ–¥–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–≥–Ω–∞–ª–∞,
            # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏ –∏ —Ç.–¥., –Ω–æ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏—è API –º–æ–¥–µ–º–∞

            return info

        except Exception as e:
            logger.error(f"Error getting modem web info: {e}")
            return None

    async def refresh_modem_status(self, modem_id: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        if not modem:
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            web_interface = modem.get('web_interface')
            if web_interface:
                web_accessible = await self.check_web_interface_accessibility(web_interface)
                modem['web_accessible'] = web_accessible

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                new_status = 'online' if web_accessible else 'offline'
                if modem.get('status') != new_status:
                    await self.update_device_status(modem_id, new_status)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π IP (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à)
            modem.pop('external_ip', None)  # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
            external_ip = await self.get_device_external_ip(modem_id)
            if external_ip:
                modem['external_ip'] = external_ip
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î —Ç–æ–∂–µ
                await self.update_device_external_ip_in_db(modem_id, external_ip)

            modem['last_seen'] = datetime.now().isoformat()
            return True

        except Exception as e:
            logger.error(f"Error refreshing modem status: {e}")
            return False

    async def update_device_external_ip_in_db(self, modem_id: str, external_ip: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –º–æ–¥–µ–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with AsyncSessionLocal() as db:
                stmt = update(ProxyDevice).where(
                    ProxyDevice.name == modem_id
                ).values(
                    current_external_ip=external_ip,
                    updated_at=datetime.now()
                )
                await db.execute(stmt)
                await db.commit()
                logger.debug(f"Updated external IP in DB for {modem_id}: {external_ip}")
        except Exception as e:
            logger.error(f"Error updating external IP in DB: {e}")

    async def get_modem_stats(self, modem_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        if not modem:
            return None

        try:
            stats = {
                "modem_id": modem_id,
                "model": modem.get('model', 'E3372h'),
                "manufacturer": modem.get('manufacturer', 'Huawei'),
                "status": modem.get('status', 'unknown'),
                "interface": modem.get('interface'),
                "web_interface": modem.get('web_interface'),
                "subnet_number": modem.get('subnet_number'),
                "interface_ip": modem.get('interface_ip'),
                "external_ip": modem.get('external_ip'),
                "mac_address": modem.get('mac_address'),
                "last_seen": modem.get('last_seen'),
                "web_accessible": modem.get('web_accessible', False),
                "routing_capable": modem.get('routing_capable', True),
                "connection_status": modem.get('connection_status', 'Unknown'),
                "signal_strength": modem.get('signal_strength', 'N/A'),
                "operator": modem.get('operator', 'Unknown'),
                "technology": modem.get('technology', '4G LTE')
            }

            return stats

        except Exception as e:
            logger.error(f"Error getting modem stats: {e}")
            return None

    async def discover_android_devices(self) -> Dict[str, dict]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –º–æ–¥–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç Android"""
        return {}

    async def get_usb_modem_details(self, device_path: str) -> dict:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–º–µ—Å—Ç–æ AT –∫–æ–º–∞–Ω–¥"""
        return {}

    async def discover_network_modems(self) -> Dict[str, dict]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ USB –º–æ–¥–µ–º—ã Huawei"""
        return {}

    async def force_refresh_external_ip(self, modem_id: str) -> Optional[str]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –º–æ–¥–µ–º–∞"""
        modem = self.modems.get(modem_id)
        if not modem:
            return None

        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            modem.pop('external_ip', None)

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π IP
            external_ip = await self.get_device_external_ip(modem_id)

            if external_ip:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                await self.update_device_external_ip_in_db(modem_id, external_ip)
                logger.info(f"Force refreshed external IP for {modem_id}: {external_ip}")
                return external_ip
            else:
                logger.warning(f"Could not refresh external IP for {modem_id}")
                return None

        except Exception as e:
            logger.error(f"Error force refreshing external IP for {modem_id}: {e}")
            return None
